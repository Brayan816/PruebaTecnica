{"ast":null,"code":"var _jsxFileName = \"C:\\\\PROYECTOJOSE\\\\my-fullstack-app\\\\frontend\\\\src\\\\GoogleMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialCenter = {\n  lat: 7.89391,\n  lng: -72.50782\n};\nexport default function GoogleMap() {\n  _s();\n  const mapRef = useRef(null);\n  const googleMapRef = useRef(null);\n  const geocoderRef = useRef(null);\n  const markersRef = useRef([]);\n  const tempMarkerRef = useRef(null);\n  const [searchText, setSearchText] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedLocations, setSelectedLocations] = useState([]);\n\n  // Referencia para el temporizador de debounce\n  const searchTimeoutRef = useRef(null);\n  // Cache para almacenar resultados de búsquedas previas\n  const searchCacheRef = useRef({});\n\n  // Inicializar Google Maps\n  useEffect(() => {\n    const loadMap = () => {\n      const mapOptions = {\n        center: initialCenter,\n        zoom: 13,\n        mapTypeControl: true,\n        streetViewControl: true,\n        fullscreenControl: true\n      };\n\n      // Crear el mapa\n      const map = new window.google.maps.Map(mapRef.current, mapOptions);\n      googleMapRef.current = map;\n\n      // Crear el geocoder\n      geocoderRef.current = new window.google.maps.Geocoder();\n\n      // Configurar el evento de doble clic\n      map.addListener('dblclick', event => {\n        handleMapDoubleClick(event.latLng);\n      });\n    };\n\n    // Cargar la API de Google Maps si aún no está cargada\n    if (!window.google) {\n      const script = document.createElement('script');\n      script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyDojbUyQ30EbzMwNRXKlFYxMQmqRtOw1Y0&libraries=places`;\n      script.async = true;\n      script.defer = true;\n      script.onload = loadMap;\n      document.body.appendChild(script);\n    } else {\n      loadMap();\n    }\n  }, []);\n\n  // Manejar el doble clic en el mapa\n  const handleMapDoubleClick = useCallback(latLng => {\n    setLoading(true);\n\n    // Crear un marcador temporal mientras se obtiene la información\n    if (tempMarkerRef.current) {\n      tempMarkerRef.current.setMap(null);\n    }\n    tempMarkerRef.current = new window.google.maps.Marker({\n      position: latLng,\n      map: googleMapRef.current,\n      opacity: 0.7,\n      title: 'Obteniendo información...'\n    });\n\n    // Realizar geocodificación inversa para obtener la dirección\n    geocoderRef.current.geocode({\n      location: latLng\n    }, (results, status) => {\n      if (status === 'OK' && results[0]) {\n        const address = results[0].formatted_address;\n\n        // Actualizar el campo de búsqueda con la dirección encontrada\n        setSearchText(address);\n\n        // Agregar la ubicación seleccionada a la lista\n        const newLocation = {\n          id: Date.now(),\n          position: latLng,\n          name: results[0].address_components[0].short_name,\n          fullName: address\n        };\n        setSelectedLocations(prev => [...prev, newLocation]);\n\n        // Actualizar centro del mapa\n        googleMapRef.current.setCenter(latLng);\n\n        // Crear un marcador permanente\n        const marker = createMarker(newLocation);\n        markersRef.current.push(marker);\n\n        // Eliminar el marcador temporal\n        if (tempMarkerRef.current) {\n          tempMarkerRef.current.setMap(null);\n          tempMarkerRef.current = null;\n        }\n      } else {\n        console.error('Geocoder failed due to: ' + status);\n\n        // Eliminar el marcador temporal en caso de error\n        if (tempMarkerRef.current) {\n          tempMarkerRef.current.setMap(null);\n          tempMarkerRef.current = null;\n        }\n      }\n      setLoading(false);\n    });\n  }, []);\n\n  // Crear un marcador para una ubicación\n  const createMarker = location => {\n    const marker = new window.google.maps.Marker({\n      position: location.position,\n      map: googleMapRef.current,\n      title: location.name\n    });\n\n    // Crear ventana de información\n    const infoWindow = new window.google.maps.InfoWindow({\n      content: `\n        <div>\n          <strong>${location.name}</strong>\n          <p style=\"font-size: 12px; margin: 5px 0\">${location.fullName}</p>\n          <button id=\"removeBtn-${location.id}\" style=\"padding: 3px 8px; background: #f44336; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 12px\">\n            Eliminar\n          </button>\n        </div>\n      `\n    });\n\n    // Abrir ventana al hacer clic en el marcador\n    marker.addListener('click', () => {\n      infoWindow.open(googleMapRef.current, marker);\n\n      // Añadir el listener del botón eliminar después de que se haya abierto la ventana\n      setTimeout(() => {\n        const removeBtn = document.getElementById(`removeBtn-${location.id}`);\n        if (removeBtn) {\n          removeBtn.addEventListener('click', () => {\n            removeLocation(location.id);\n            infoWindow.close();\n          });\n        }\n      }, 10);\n    });\n    return {\n      marker,\n      infoWindow,\n      id: location.id\n    };\n  };\n\n  // Función para manejar la búsqueda\n  const handleSearchChange = event => {\n    const query = event.target.value;\n    setSearchText(query);\n\n    // Limpiar cualquier temporizador existente\n    if (searchTimeoutRef.current) {\n      clearTimeout(searchTimeoutRef.current);\n    }\n    if (query.length > 2) {\n      // Solo empezar a buscar después de 3 caracteres\n      setLoading(true);\n\n      // Verificar si tenemos resultados en caché\n      if (searchCacheRef.current[query]) {\n        setSuggestions(searchCacheRef.current[query]);\n        setLoading(false);\n        return;\n      }\n\n      // Usar el servicio de Places de Google para autocomplete\n      searchTimeoutRef.current = setTimeout(() => {\n        // Si el servicio de Places ya está disponible\n        if (window.google && window.google.maps && window.google.maps.places) {\n          const service = new window.google.maps.places.AutocompleteService();\n          service.getPlacePredictions({\n            input: query\n          }, (predictions, status) => {\n            if (status === window.google.maps.places.PlacesServiceStatus.OK && predictions) {\n              // Convertir las predicciones al formato que espera nuestro componente\n              const results = predictions.slice(0, 3).map(prediction => ({\n                place_id: prediction.place_id,\n                display_name: prediction.description,\n                type: getPlaceType(prediction.types)\n              }));\n\n              // Guardar en caché\n              searchCacheRef.current[query] = results;\n              setSuggestions(results);\n            } else {\n              setSuggestions([]);\n            }\n            setLoading(false);\n          });\n        } else {\n          // Fallback a geocodificación simple si Places no está disponible\n          geocoderRef.current.geocode({\n            address: query\n          }, (results, status) => {\n            if (status === 'OK') {\n              const formattedResults = results.slice(0, 3).map(result => ({\n                place_id: result.place_id,\n                display_name: result.formatted_address,\n                position: result.geometry.location,\n                type: getPlaceType(result.types)\n              }));\n\n              // Guardar en caché\n              searchCacheRef.current[query] = formattedResults;\n              setSuggestions(formattedResults);\n            } else {\n              setSuggestions([]);\n            }\n            setLoading(false);\n          });\n        }\n      }, 300);\n    } else {\n      setSuggestions([]);\n      setLoading(false);\n    }\n  };\n\n  // Determinar el tipo de lugar basado en los tipos de Google\n  const getPlaceType = types => {\n    if (!types || types.length === 0) return 'Lugar';\n    if (types.includes('locality') || types.includes('administrative_area_level_1')) {\n      return 'Ciudad';\n    } else if (types.includes('establishment')) {\n      return 'Establecimiento';\n    } else if (types.includes('street_address') || types.includes('route')) {\n      return 'Dirección';\n    }\n    return 'Lugar';\n  };\n\n  // Manejar la selección de una sugerencia\n  const handleSuggestionClick = suggestion => {\n    setLoading(true);\n\n    // Si tenemos un place_id, usamos el servicio de Places para obtener los detalles\n    if (suggestion.place_id) {\n      // Crear PlacesService (requiere un elemento del DOM)\n      const placesService = new window.google.maps.places.PlacesService(googleMapRef.current);\n      placesService.getDetails({\n        placeId: suggestion.place_id,\n        fields: ['name', 'formatted_address', 'geometry']\n      }, (place, status) => {\n        if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n          // Crear una ubicación con los detalles del lugar\n          const newLocation = {\n            id: Date.now(),\n            position: place.geometry.location,\n            name: place.name || suggestion.display_name.split(',')[0],\n            fullName: place.formatted_address || suggestion.display_name\n          };\n\n          // Agregar la ubicación a la lista\n          setSelectedLocations(prev => [...prev, newLocation]);\n\n          // Centrar el mapa en la ubicación\n          googleMapRef.current.setCenter(place.geometry.location);\n          googleMapRef.current.setZoom(15);\n\n          // Crear un marcador para la ubicación\n          const marker = createMarker(newLocation);\n          markersRef.current.push(marker);\n\n          // Actualizar el campo de búsqueda\n          setSearchText(place.formatted_address || suggestion.display_name);\n        }\n        setLoading(false);\n        setSuggestions([]);\n      });\n    } else if (suggestion.position) {\n      // Si ya tenemos la posición (del fallback de geocodificación)\n      const newLocation = {\n        id: Date.now(),\n        position: suggestion.position,\n        name: suggestion.display_name.split(',')[0],\n        fullName: suggestion.display_name\n      };\n      setSelectedLocations(prev => [...prev, newLocation]);\n      googleMapRef.current.setCenter(suggestion.position);\n      googleMapRef.current.setZoom(15);\n      const marker = createMarker(newLocation);\n      markersRef.current.push(marker);\n      setSearchText(suggestion.display_name);\n      setLoading(false);\n      setSuggestions([]);\n    }\n  };\n\n  // Función para eliminar una ubicación\n  const removeLocation = locationId => {\n    // Eliminar el marcador del mapa\n    const markerIndex = markersRef.current.findIndex(marker => marker.id === locationId);\n    if (markerIndex !== -1) {\n      markersRef.current[markerIndex].marker.setMap(null);\n      markersRef.current.splice(markerIndex, 1);\n    }\n\n    // Eliminar la ubicación de la lista\n    setSelectedLocations(prev => prev.filter(loc => loc.id !== locationId));\n  };\n\n  // Función para limpiar el campo de búsqueda\n  const clearSearch = () => {\n    setSearchText('');\n    setSuggestions([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'relative',\n      width: '100%',\n      height: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        bottom: '20px',\n        left: '50%',\n        transform: 'translateX(-50%)',\n        backgroundColor: 'rgba(0, 0, 0, 0.7)',\n        color: 'white',\n        padding: '8px 16px',\n        borderRadius: '20px',\n        fontSize: '14px',\n        zIndex: 1000,\n        pointerEvents: 'none'\n      },\n      children: \"Haz doble clic en cualquier lugar del mapa para seleccionar una ubicaci\\xF3n\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '10px',\n        left: '10px',\n        right: '10px',\n        zIndex: 1000\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'relative'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: searchText,\n          onChange: handleSearchChange,\n          placeholder: \"Buscar ubicaci\\xF3n (ciudad, direcci\\xF3n, lugar)\",\n          style: {\n            width: '100%',\n            padding: '10px',\n            borderRadius: '4px',\n            border: '1px solid #ccc',\n            boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this), searchText && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: clearSearch,\n          style: {\n            position: 'absolute',\n            right: '10px',\n            top: '50%',\n            transform: 'translateY(-50%)',\n            background: 'none',\n            border: 'none',\n            cursor: 'pointer',\n            fontSize: '16px'\n          },\n          children: \"\\u2715\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: 'white',\n          padding: '10px',\n          borderRadius: '0 0 4px 4px',\n          border: '1px solid #ccc',\n          borderTop: 'none',\n          textAlign: 'center'\n        },\n        children: \"Cargando sugerencias...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 11\n      }, this), suggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n        style: {\n          listStyle: 'none',\n          margin: '0',\n          padding: '0',\n          background: 'white',\n          border: '1px solid #ccc',\n          borderTop: 'none',\n          borderRadius: '0 0 4px 4px',\n          maxHeight: '200px',\n          overflowY: 'auto'\n        },\n        children: suggestions.map((suggestion, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleSuggestionClick(suggestion),\n          style: {\n            padding: '10px',\n            borderBottom: index < suggestions.length - 1 ? '1px solid #eee' : 'none',\n            cursor: 'pointer'\n          },\n          onMouseOver: e => e.target.style.backgroundColor = '#f5f5f5',\n          onMouseOut: e => e.target.style.backgroundColor = 'transparent',\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontWeight: 'bold'\n            },\n            children: suggestion.display_name.split(',')[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '12px',\n              color: '#666'\n            },\n            children: suggestion.display_name.split(',').slice(1).join(',')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '11px',\n              color: '#999',\n              fontStyle: 'italic'\n            },\n            children: suggestion.type\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 424,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapRef,\n      style: {\n        width: '100%',\n        height: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 321,\n    columnNumber: 5\n  }, this);\n}\n_s(GoogleMap, \"cqVdzE0POZYMr1QOfXR8z7jWxqc=\");\n_c = GoogleMap;\nvar _c;\n$RefreshReg$(_c, \"GoogleMap\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","jsxDEV","_jsxDEV","initialCenter","lat","lng","GoogleMap","_s","mapRef","googleMapRef","geocoderRef","markersRef","tempMarkerRef","searchText","setSearchText","suggestions","setSuggestions","loading","setLoading","selectedLocations","setSelectedLocations","searchTimeoutRef","searchCacheRef","loadMap","mapOptions","center","zoom","mapTypeControl","streetViewControl","fullscreenControl","map","window","google","maps","Map","current","Geocoder","addListener","event","handleMapDoubleClick","latLng","script","document","createElement","src","async","defer","onload","body","appendChild","setMap","Marker","position","opacity","title","geocode","location","results","status","address","formatted_address","newLocation","id","Date","now","name","address_components","short_name","fullName","prev","setCenter","marker","createMarker","push","console","error","infoWindow","InfoWindow","content","open","setTimeout","removeBtn","getElementById","addEventListener","removeLocation","close","handleSearchChange","query","target","value","clearTimeout","length","places","service","AutocompleteService","getPlacePredictions","input","predictions","PlacesServiceStatus","OK","slice","prediction","place_id","display_name","description","type","getPlaceType","types","formattedResults","result","geometry","includes","handleSuggestionClick","suggestion","placesService","PlacesService","getDetails","placeId","fields","place","split","setZoom","locationId","markerIndex","findIndex","splice","filter","loc","clearSearch","style","width","height","children","bottom","left","transform","backgroundColor","color","padding","borderRadius","fontSize","zIndex","pointerEvents","fileName","_jsxFileName","lineNumber","columnNumber","top","right","onChange","placeholder","border","boxShadow","onClick","background","cursor","borderTop","textAlign","listStyle","margin","maxHeight","overflowY","index","borderBottom","onMouseOver","e","onMouseOut","fontWeight","join","fontStyle","ref","_c","$RefreshReg$"],"sources":["C:/PROYECTOJOSE/my-fullstack-app/frontend/src/GoogleMap.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\r\n\r\nconst initialCenter = { lat: 7.89391, lng: -72.50782 };\r\n\r\nexport default function GoogleMap() {\r\n  const mapRef = useRef(null);\r\n  const googleMapRef = useRef(null);\r\n  const geocoderRef = useRef(null);\r\n  const markersRef = useRef([]);\r\n  const tempMarkerRef = useRef(null);\r\n  \r\n  const [searchText, setSearchText] = useState('');\r\n  const [suggestions, setSuggestions] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [selectedLocations, setSelectedLocations] = useState([]);\r\n  \r\n  // Referencia para el temporizador de debounce\r\n  const searchTimeoutRef = useRef(null);\r\n  // Cache para almacenar resultados de búsquedas previas\r\n  const searchCacheRef = useRef({});\r\n\r\n  // Inicializar Google Maps\r\n  useEffect(() => {\r\n    const loadMap = () => {\r\n      const mapOptions = {\r\n        center: initialCenter,\r\n        zoom: 13,\r\n        mapTypeControl: true,\r\n        streetViewControl: true,\r\n        fullscreenControl: true,\r\n      };\r\n      \r\n      // Crear el mapa\r\n      const map = new window.google.maps.Map(mapRef.current, mapOptions);\r\n      googleMapRef.current = map;\r\n      \r\n      // Crear el geocoder\r\n      geocoderRef.current = new window.google.maps.Geocoder();\r\n      \r\n      // Configurar el evento de doble clic\r\n      map.addListener('dblclick', (event) => {\r\n        handleMapDoubleClick(event.latLng);\r\n      });\r\n    };\r\n\r\n    // Cargar la API de Google Maps si aún no está cargada\r\n    if (!window.google) {\r\n      const script = document.createElement('script');\r\n      script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyDojbUyQ30EbzMwNRXKlFYxMQmqRtOw1Y0&libraries=places`;\r\n      script.async = true;\r\n      script.defer = true;\r\n      script.onload = loadMap;\r\n      document.body.appendChild(script);\r\n    } else {\r\n      loadMap();\r\n    }\r\n  }, []);\r\n\r\n  // Manejar el doble clic en el mapa\r\n  const handleMapDoubleClick = useCallback((latLng) => {\r\n    setLoading(true);\r\n    \r\n    // Crear un marcador temporal mientras se obtiene la información\r\n    if (tempMarkerRef.current) {\r\n      tempMarkerRef.current.setMap(null);\r\n    }\r\n    \r\n    tempMarkerRef.current = new window.google.maps.Marker({\r\n      position: latLng,\r\n      map: googleMapRef.current,\r\n      opacity: 0.7,\r\n      title: 'Obteniendo información...'\r\n    });\r\n    \r\n    // Realizar geocodificación inversa para obtener la dirección\r\n    geocoderRef.current.geocode({ location: latLng }, (results, status) => {\r\n      if (status === 'OK' && results[0]) {\r\n        const address = results[0].formatted_address;\r\n        \r\n        // Actualizar el campo de búsqueda con la dirección encontrada\r\n        setSearchText(address);\r\n        \r\n        // Agregar la ubicación seleccionada a la lista\r\n        const newLocation = {\r\n          id: Date.now(),\r\n          position: latLng,\r\n          name: results[0].address_components[0].short_name,\r\n          fullName: address\r\n        };\r\n        \r\n        setSelectedLocations(prev => [...prev, newLocation]);\r\n        \r\n        // Actualizar centro del mapa\r\n        googleMapRef.current.setCenter(latLng);\r\n        \r\n        // Crear un marcador permanente\r\n        const marker = createMarker(newLocation);\r\n        markersRef.current.push(marker);\r\n        \r\n        // Eliminar el marcador temporal\r\n        if (tempMarkerRef.current) {\r\n          tempMarkerRef.current.setMap(null);\r\n          tempMarkerRef.current = null;\r\n        }\r\n      } else {\r\n        console.error('Geocoder failed due to: ' + status);\r\n        \r\n        // Eliminar el marcador temporal en caso de error\r\n        if (tempMarkerRef.current) {\r\n          tempMarkerRef.current.setMap(null);\r\n          tempMarkerRef.current = null;\r\n        }\r\n      }\r\n      \r\n      setLoading(false);\r\n    });\r\n  }, []);\r\n\r\n  // Crear un marcador para una ubicación\r\n  const createMarker = (location) => {\r\n    const marker = new window.google.maps.Marker({\r\n      position: location.position,\r\n      map: googleMapRef.current,\r\n      title: location.name\r\n    });\r\n    \r\n    // Crear ventana de información\r\n    const infoWindow = new window.google.maps.InfoWindow({\r\n      content: `\r\n        <div>\r\n          <strong>${location.name}</strong>\r\n          <p style=\"font-size: 12px; margin: 5px 0\">${location.fullName}</p>\r\n          <button id=\"removeBtn-${location.id}\" style=\"padding: 3px 8px; background: #f44336; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 12px\">\r\n            Eliminar\r\n          </button>\r\n        </div>\r\n      `\r\n    });\r\n    \r\n    // Abrir ventana al hacer clic en el marcador\r\n    marker.addListener('click', () => {\r\n      infoWindow.open(googleMapRef.current, marker);\r\n      \r\n      // Añadir el listener del botón eliminar después de que se haya abierto la ventana\r\n      setTimeout(() => {\r\n        const removeBtn = document.getElementById(`removeBtn-${location.id}`);\r\n        if (removeBtn) {\r\n          removeBtn.addEventListener('click', () => {\r\n            removeLocation(location.id);\r\n            infoWindow.close();\r\n          });\r\n        }\r\n      }, 10);\r\n    });\r\n    \r\n    return { marker, infoWindow, id: location.id };\r\n  };\r\n\r\n  // Función para manejar la búsqueda\r\n  const handleSearchChange = (event) => {\r\n    const query = event.target.value;\r\n    setSearchText(query);\r\n    \r\n    // Limpiar cualquier temporizador existente\r\n    if (searchTimeoutRef.current) {\r\n      clearTimeout(searchTimeoutRef.current);\r\n    }\r\n    \r\n    if (query.length > 2) { // Solo empezar a buscar después de 3 caracteres\r\n      setLoading(true);\r\n      \r\n      // Verificar si tenemos resultados en caché\r\n      if (searchCacheRef.current[query]) {\r\n        setSuggestions(searchCacheRef.current[query]);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      \r\n      // Usar el servicio de Places de Google para autocomplete\r\n      searchTimeoutRef.current = setTimeout(() => {\r\n        // Si el servicio de Places ya está disponible\r\n        if (window.google && window.google.maps && window.google.maps.places) {\r\n          const service = new window.google.maps.places.AutocompleteService();\r\n          service.getPlacePredictions({ input: query }, (predictions, status) => {\r\n            if (status === window.google.maps.places.PlacesServiceStatus.OK && predictions) {\r\n              // Convertir las predicciones al formato que espera nuestro componente\r\n              const results = predictions.slice(0, 3).map(prediction => ({\r\n                place_id: prediction.place_id,\r\n                display_name: prediction.description,\r\n                type: getPlaceType(prediction.types)\r\n              }));\r\n              \r\n              // Guardar en caché\r\n              searchCacheRef.current[query] = results;\r\n              setSuggestions(results);\r\n            } else {\r\n              setSuggestions([]);\r\n            }\r\n            setLoading(false);\r\n          });\r\n        } else {\r\n          // Fallback a geocodificación simple si Places no está disponible\r\n          geocoderRef.current.geocode({ address: query }, (results, status) => {\r\n            if (status === 'OK') {\r\n              const formattedResults = results.slice(0, 3).map(result => ({\r\n                place_id: result.place_id,\r\n                display_name: result.formatted_address,\r\n                position: result.geometry.location,\r\n                type: getPlaceType(result.types)\r\n              }));\r\n              \r\n              // Guardar en caché\r\n              searchCacheRef.current[query] = formattedResults;\r\n              setSuggestions(formattedResults);\r\n            } else {\r\n              setSuggestions([]);\r\n            }\r\n            setLoading(false);\r\n          });\r\n        }\r\n      }, 300);\r\n    } else {\r\n      setSuggestions([]);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Determinar el tipo de lugar basado en los tipos de Google\r\n  const getPlaceType = (types) => {\r\n    if (!types || types.length === 0) return 'Lugar';\r\n    \r\n    if (types.includes('locality') || types.includes('administrative_area_level_1')) {\r\n      return 'Ciudad';\r\n    } else if (types.includes('establishment')) {\r\n      return 'Establecimiento';\r\n    } else if (types.includes('street_address') || types.includes('route')) {\r\n      return 'Dirección';\r\n    }\r\n    return 'Lugar';\r\n  };\r\n\r\n  // Manejar la selección de una sugerencia\r\n  const handleSuggestionClick = (suggestion) => {\r\n    setLoading(true);\r\n    \r\n    // Si tenemos un place_id, usamos el servicio de Places para obtener los detalles\r\n    if (suggestion.place_id) {\r\n      // Crear PlacesService (requiere un elemento del DOM)\r\n      const placesService = new window.google.maps.places.PlacesService(googleMapRef.current);\r\n      \r\n      placesService.getDetails({ placeId: suggestion.place_id, fields: ['name', 'formatted_address', 'geometry'] }, (place, status) => {\r\n        if (status === window.google.maps.places.PlacesServiceStatus.OK) {\r\n          // Crear una ubicación con los detalles del lugar\r\n          const newLocation = {\r\n            id: Date.now(),\r\n            position: place.geometry.location,\r\n            name: place.name || suggestion.display_name.split(',')[0],\r\n            fullName: place.formatted_address || suggestion.display_name\r\n          };\r\n          \r\n          // Agregar la ubicación a la lista\r\n          setSelectedLocations(prev => [...prev, newLocation]);\r\n          \r\n          // Centrar el mapa en la ubicación\r\n          googleMapRef.current.setCenter(place.geometry.location);\r\n          googleMapRef.current.setZoom(15);\r\n          \r\n          // Crear un marcador para la ubicación\r\n          const marker = createMarker(newLocation);\r\n          markersRef.current.push(marker);\r\n          \r\n          // Actualizar el campo de búsqueda\r\n          setSearchText(place.formatted_address || suggestion.display_name);\r\n        }\r\n        \r\n        setLoading(false);\r\n        setSuggestions([]);\r\n      });\r\n    } else if (suggestion.position) {\r\n      // Si ya tenemos la posición (del fallback de geocodificación)\r\n      const newLocation = {\r\n        id: Date.now(),\r\n        position: suggestion.position,\r\n        name: suggestion.display_name.split(',')[0],\r\n        fullName: suggestion.display_name\r\n      };\r\n      \r\n      setSelectedLocations(prev => [...prev, newLocation]);\r\n      googleMapRef.current.setCenter(suggestion.position);\r\n      googleMapRef.current.setZoom(15);\r\n      \r\n      const marker = createMarker(newLocation);\r\n      markersRef.current.push(marker);\r\n      \r\n      setSearchText(suggestion.display_name);\r\n      setLoading(false);\r\n      setSuggestions([]);\r\n    }\r\n  };\r\n\r\n  // Función para eliminar una ubicación\r\n  const removeLocation = (locationId) => {\r\n    // Eliminar el marcador del mapa\r\n    const markerIndex = markersRef.current.findIndex(marker => marker.id === locationId);\r\n    if (markerIndex !== -1) {\r\n      markersRef.current[markerIndex].marker.setMap(null);\r\n      markersRef.current.splice(markerIndex, 1);\r\n    }\r\n    \r\n    // Eliminar la ubicación de la lista\r\n    setSelectedLocations(prev => prev.filter(loc => loc.id !== locationId));\r\n  };\r\n\r\n  // Función para limpiar el campo de búsqueda\r\n  const clearSearch = () => {\r\n    setSearchText('');\r\n    setSuggestions([]);\r\n  };\r\n\r\n  return (\r\n    <div style={{ position: 'relative', width: '100%', height: '100%' }}>\r\n      {/* Mensaje de ayuda para el usuario */}\r\n      <div style={{ \r\n        position: 'absolute',\r\n        bottom: '20px',\r\n        left: '50%',\r\n        transform: 'translateX(-50%)',\r\n        backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n        color: 'white',\r\n        padding: '8px 16px',\r\n        borderRadius: '20px',\r\n        fontSize: '14px',\r\n        zIndex: 1000,\r\n        pointerEvents: 'none'\r\n      }}>\r\n        Haz doble clic en cualquier lugar del mapa para seleccionar una ubicación\r\n      </div>\r\n      \r\n      {/* Barra de búsqueda */}\r\n      <div style={{ \r\n        position: 'absolute', \r\n        top: '10px', \r\n        left: '10px', \r\n        right: '10px', \r\n        zIndex: 1000 \r\n      }}>\r\n        <div style={{ position: 'relative' }}>\r\n          <input\r\n            type=\"text\"\r\n            value={searchText}\r\n            onChange={handleSearchChange}\r\n            placeholder=\"Buscar ubicación (ciudad, dirección, lugar)\"\r\n            style={{ \r\n              width: '100%', \r\n              padding: '10px', \r\n              borderRadius: '4px',\r\n              border: '1px solid #ccc',\r\n              boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\r\n            }}\r\n          />\r\n          \r\n          {searchText && (\r\n            <button \r\n              onClick={clearSearch}\r\n              style={{\r\n                position: 'absolute',\r\n                right: '10px',\r\n                top: '50%',\r\n                transform: 'translateY(-50%)',\r\n                background: 'none',\r\n                border: 'none',\r\n                cursor: 'pointer',\r\n                fontSize: '16px'\r\n              }}\r\n            >\r\n              ✕\r\n            </button>\r\n          )}\r\n        </div>\r\n        \r\n        {loading && (\r\n          <div style={{ \r\n            background: 'white', \r\n            padding: '10px', \r\n            borderRadius: '0 0 4px 4px',\r\n            border: '1px solid #ccc',\r\n            borderTop: 'none',\r\n            textAlign: 'center'\r\n          }}>\r\n            Cargando sugerencias...\r\n          </div>\r\n        )}\r\n        \r\n        {suggestions.length > 0 && (\r\n          <ul style={{ \r\n            listStyle: 'none',\r\n            margin: '0',\r\n            padding: '0',\r\n            background: 'white',\r\n            border: '1px solid #ccc',\r\n            borderTop: 'none',\r\n            borderRadius: '0 0 4px 4px',\r\n            maxHeight: '200px',\r\n            overflowY: 'auto'\r\n          }}>\r\n            {suggestions.map((suggestion, index) => (\r\n              <li \r\n                key={index} \r\n                onClick={() => handleSuggestionClick(suggestion)}\r\n                style={{ \r\n                  padding: '10px',\r\n                  borderBottom: index < suggestions.length - 1 ? '1px solid #eee' : 'none',\r\n                  cursor: 'pointer'\r\n                }}\r\n                onMouseOver={(e) => e.target.style.backgroundColor = '#f5f5f5'}\r\n                onMouseOut={(e) => e.target.style.backgroundColor = 'transparent'}\r\n              >\r\n                <div style={{ fontWeight: 'bold' }}>\r\n                  {suggestion.display_name.split(',')[0]}\r\n                </div>\r\n                <div style={{ fontSize: '12px', color: '#666' }}>\r\n                  {suggestion.display_name.split(',').slice(1).join(',')}\r\n                </div>\r\n                <div style={{ fontSize: '11px', color: '#999', fontStyle: 'italic' }}>\r\n                  {suggestion.type}\r\n                </div>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n      </div>\r\n      \r\n      {/* Contenedor del mapa de Google */}\r\n      <div ref={mapRef} style={{ width: '100%', height: '100%' }} />\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}