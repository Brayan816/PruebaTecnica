{"ast":null,"code":"var _jsxFileName = \"C:\\\\PROYECTOJOSE\\\\my-fullstack-app\\\\frontend\\\\src\\\\GoogleMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialCenter = {\n  lat: 7.89391,\n  lng: -72.50782\n};\nexport default function GoogleMap() {\n  _s();\n  const mapRef = useRef(null);\n  const googleMapRef = useRef(null);\n  const geocoderRef = useRef(null);\n  const markersRef = useRef([]);\n  const tempMarkerRef = useRef(null);\n  const [searchText, setSearchText] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedLocations, setSelectedLocations] = useState([]);\n  const [mapError, setMapError] = useState(null);\n\n  // Referencia para el temporizador de debounce\n  const searchTimeoutRef = useRef(null);\n  // Cache para almacenar resultados de búsquedas previas\n  const searchCacheRef = useRef({});\n\n  // Inicializar Google Maps\n  useEffect(() => {\n    const loadMap = () => {\n      try {\n        // Verificar si la API de Google Maps se cargó correctamente\n        if (!window.google || !window.google.maps) {\n          console.error(\"Google Maps API no se cargó correctamente\");\n          setMapError(\"No se pudo cargar Google Maps. Verifica tu API key.\");\n          return;\n        }\n        console.log(\"Inicializando mapa de Google...\");\n        const mapOptions = {\n          center: initialCenter,\n          zoom: 13,\n          mapTypeControl: true,\n          streetViewControl: true,\n          fullscreenControl: true\n        };\n\n        // Crear el mapa\n        const map = new window.google.maps.Map(mapRef.current, mapOptions);\n        googleMapRef.current = map;\n\n        // Crear el geocoder\n        geocoderRef.current = new window.google.maps.Geocoder();\n\n        // Configurar el evento de doble clic\n        map.addListener('dblclick', event => {\n          handleMapDoubleClick(event.latLng);\n        });\n        console.log(\"Mapa de Google inicializado con éxito\");\n\n        // Añadir un marcador inicial para verificar que el mapa funciona\n        new window.google.maps.Marker({\n          position: initialCenter,\n          map,\n          title: 'Ubicación inicial'\n        });\n      } catch (error) {\n        console.error(\"Error al inicializar el mapa de Google:\", error);\n        setMapError(`Error al inicializar el mapa: ${error.message}`);\n      }\n    };\n\n    // Cargar la API de Google Maps si aún no está cargada\n    if (!window.google) {\n      console.log(\"Cargando la API de Google Maps...\");\n      const script = document.createElement('script');\n      script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyDojbUyQ30EbzMwNRXKlFYxMQmqRtOw1Y0&libraries=places`;\n      script.async = true;\n      script.defer = true;\n      script.onload = () => {\n        console.log(\"Script de Google Maps cargado correctamente\");\n        loadMap();\n      };\n      script.onerror = error => {\n        console.error(\"Error al cargar el script de Google Maps:\", error);\n        setMapError(\"No se pudo cargar la API de Google Maps. Verifica tu conexión a internet o la API key.\");\n      };\n      document.body.appendChild(script);\n    } else {\n      loadMap();\n    }\n\n    // Limpieza\n    return () => {\n      // Limpiar marcadores si es necesario\n      if (markersRef.current.length > 0) {\n        markersRef.current.forEach(marker => {\n          if (marker.marker) marker.marker.setMap(null);\n        });\n      }\n      if (tempMarkerRef.current) {\n        tempMarkerRef.current.setMap(null);\n      }\n    };\n  }, []);\n\n  // Manejar el doble clic en el mapa\n  const handleMapDoubleClick = useCallback(latLng => {\n    if (!googleMapRef.current || !geocoderRef.current) {\n      console.error(\"El mapa o el geocoder no están inicializados\");\n      return;\n    }\n    setLoading(true);\n\n    // Crear un marcador temporal mientras se obtiene la información\n    if (tempMarkerRef.current) {\n      tempMarkerRef.current.setMap(null);\n    }\n    tempMarkerRef.current = new window.google.maps.Marker({\n      position: latLng,\n      map: googleMapRef.current,\n      opacity: 0.7,\n      title: 'Obteniendo información...'\n    });\n\n    // Realizar geocodificación inversa para obtener la dirección\n    geocoderRef.current.geocode({\n      location: latLng\n    }, (results, status) => {\n      if (status === 'OK' && results[0]) {\n        const address = results[0].formatted_address;\n\n        // Actualizar el campo de búsqueda con la dirección encontrada\n        setSearchText(address);\n\n        // Agregar la ubicación seleccionada a la lista\n        const newLocation = {\n          id: Date.now(),\n          position: latLng,\n          name: results[0].address_components[0].short_name,\n          fullName: address\n        };\n        setSelectedLocations(prev => [...prev, newLocation]);\n\n        // Actualizar centro del mapa\n        googleMapRef.current.setCenter(latLng);\n\n        // Crear un marcador permanente\n        const marker = createMarker(newLocation);\n        markersRef.current.push(marker);\n\n        // Eliminar el marcador temporal\n        if (tempMarkerRef.current) {\n          tempMarkerRef.current.setMap(null);\n          tempMarkerRef.current = null;\n        }\n      } else {\n        console.error('Geocoder failed due to: ' + status);\n\n        // Eliminar el marcador temporal en caso de error\n        if (tempMarkerRef.current) {\n          tempMarkerRef.current.setMap(null);\n          tempMarkerRef.current = null;\n        }\n      }\n      setLoading(false);\n    });\n  }, []);\n\n  // Crear un marcador para una ubicación\n  const createMarker = location => {\n    if (!googleMapRef.current) return null;\n    const marker = new window.google.maps.Marker({\n      position: location.position,\n      map: googleMapRef.current,\n      title: location.name\n    });\n\n    // Crear ventana de información\n    const infoWindow = new window.google.maps.InfoWindow({\n      content: `\n        <div>\n          <strong>${location.name}</strong>\n          <p style=\"font-size: 12px; margin: 5px 0\">${location.fullName}</p>\n          <button id=\"removeBtn-${location.id}\" style=\"padding: 3px 8px; background: #f44336; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 12px\">\n            Eliminar\n          </button>\n        </div>\n      `\n    });\n\n    // Abrir ventana al hacer clic en el marcador\n    marker.addListener('click', () => {\n      infoWindow.open(googleMapRef.current, marker);\n\n      // Añadir el listener del botón eliminar después de que se haya abierto la ventana\n      setTimeout(() => {\n        const removeBtn = document.getElementById(`removeBtn-${location.id}`);\n        if (removeBtn) {\n          removeBtn.addEventListener('click', () => {\n            removeLocation(location.id);\n            infoWindow.close();\n          });\n        }\n      }, 10);\n    });\n    return {\n      marker,\n      infoWindow,\n      id: location.id\n    };\n  };\n\n  // Función para manejar la búsqueda\n  const handleSearchChange = event => {\n    const query = event.target.value;\n    setSearchText(query);\n\n    // Limpiar cualquier temporizador existente\n    if (searchTimeoutRef.current) {\n      clearTimeout(searchTimeoutRef.current);\n    }\n    if (query.length > 2) {\n      // Solo empezar a buscar después de 3 caracteres\n      setLoading(true);\n\n      // Verificar si tenemos resultados en caché\n      if (searchCacheRef.current[query]) {\n        setSuggestions(searchCacheRef.current[query]);\n        setLoading(false);\n        return;\n      }\n\n      // Validar que la API esté cargada\n      if (!window.google || !window.google.maps) {\n        setLoading(false);\n        setMapError(\"API de Google Maps no disponible\");\n        return;\n      }\n\n      // Usar el servicio de Places de Google para autocomplete\n      searchTimeoutRef.current = setTimeout(() => {\n        try {\n          // Si el servicio de Places ya está disponible\n          if (window.google && window.google.maps && window.google.maps.places) {\n            const service = new window.google.maps.places.AutocompleteService();\n            service.getPlacePredictions({\n              input: query\n            }, (predictions, status) => {\n              if (status === window.google.maps.places.PlacesServiceStatus.OK && predictions) {\n                // Convertir las predicciones al formato que espera nuestro componente\n                const results = predictions.slice(0, 3).map(prediction => ({\n                  place_id: prediction.place_id,\n                  display_name: prediction.description,\n                  type: getPlaceType(prediction.types || [])\n                }));\n\n                // Guardar en caché\n                searchCacheRef.current[query] = results;\n                setSuggestions(results);\n              } else {\n                setSuggestions([]);\n              }\n              setLoading(false);\n            });\n          } else if (geocoderRef.current) {\n            // Fallback a geocodificación simple si Places no está disponible\n            geocoderRef.current.geocode({\n              address: query\n            }, (results, status) => {\n              if (status === 'OK') {\n                const formattedResults = results.slice(0, 3).map(result => ({\n                  place_id: result.place_id,\n                  display_name: result.formatted_address,\n                  position: result.geometry.location,\n                  type: getPlaceType(result.types || [])\n                }));\n\n                // Guardar en caché\n                searchCacheRef.current[query] = formattedResults;\n                setSuggestions(formattedResults);\n              } else {\n                setSuggestions([]);\n              }\n              setLoading(false);\n            });\n          } else {\n            setSuggestions([]);\n            setLoading(false);\n          }\n        } catch (error) {\n          console.error(\"Error en la búsqueda:\", error);\n          setSuggestions([]);\n          setLoading(false);\n        }\n      }, 300);\n    } else {\n      setSuggestions([]);\n      setLoading(false);\n    }\n  };\n\n  // Determinar el tipo de lugar basado en los tipos de Google\n  const getPlaceType = types => {\n    if (!types || types.length === 0) return 'Lugar';\n    if (types.includes('locality') || types.includes('administrative_area_level_1')) {\n      return 'Ciudad';\n    } else if (types.includes('establishment')) {\n      return 'Establecimiento';\n    } else if (types.includes('street_address') || types.includes('route')) {\n      return 'Dirección';\n    }\n    return 'Lugar';\n  };\n\n  // Manejar la selección de una sugerencia\n  const handleSuggestionClick = suggestion => {\n    if (!googleMapRef.current) {\n      console.error(\"El mapa no está inicializado\");\n      return;\n    }\n    setLoading(true);\n    try {\n      // Si tenemos un place_id, usamos el servicio de Places para obtener los detalles\n      if (suggestion.place_id && window.google.maps.places) {\n        // Crear PlacesService (requiere un elemento del DOM)\n        const placesService = new window.google.maps.places.PlacesService(googleMapRef.current);\n        placesService.getDetails({\n          placeId: suggestion.place_id,\n          fields: ['name', 'formatted_address', 'geometry']\n        }, (place, status) => {\n          if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n            // Crear una ubicación con los detalles del lugar\n            const newLocation = {\n              id: Date.now(),\n              position: place.geometry.location,\n              name: place.name || suggestion.display_name.split(',')[0],\n              fullName: place.formatted_address || suggestion.display_name\n            };\n\n            // Agregar la ubicación a la lista\n            setSelectedLocations(prev => [...prev, newLocation]);\n\n            // Centrar el mapa en la ubicación\n            googleMapRef.current.setCenter(place.geometry.location);\n            googleMapRef.current.setZoom(15);\n\n            // Crear un marcador para la ubicación\n            const marker = createMarker(newLocation);\n            if (marker) markersRef.current.push(marker);\n\n            // Actualizar el campo de búsqueda\n            setSearchText(place.formatted_address || suggestion.display_name);\n          }\n          setLoading(false);\n          setSuggestions([]);\n        });\n      } else if (suggestion.position) {\n        // Si ya tenemos la posición (del fallback de geocodificación)\n        const newLocation = {\n          id: Date.now(),\n          position: suggestion.position,\n          name: suggestion.display_name.split(',')[0],\n          fullName: suggestion.display_name\n        };\n        setSelectedLocations(prev => [...prev, newLocation]);\n        googleMapRef.current.setCenter(suggestion.position);\n        googleMapRef.current.setZoom(15);\n        const marker = createMarker(newLocation);\n        if (marker) markersRef.current.push(marker);\n        setSearchText(suggestion.display_name);\n        setLoading(false);\n        setSuggestions([]);\n      } else {\n        setLoading(false);\n        setSuggestions([]);\n      }\n    } catch (error) {\n      console.error(\"Error al seleccionar sugerencia:\", error);\n      setLoading(false);\n      setSuggestions([]);\n    }\n  };\n\n  // Función para eliminar una ubicación\n  const removeLocation = locationId => {\n    // Eliminar el marcador del mapa\n    const markerIndex = markersRef.current.findIndex(marker => marker.id === locationId);\n    if (markerIndex !== -1) {\n      markersRef.current[markerIndex].marker.setMap(null);\n      markersRef.current.splice(markerIndex, 1);\n    }\n\n    // Eliminar la ubicación de la lista\n    setSelectedLocations(prev => prev.filter(loc => loc.id !== locationId));\n  };\n\n  // Función para limpiar el campo de búsqueda\n  const clearSearch = () => {\n    setSearchText('');\n    setSuggestions([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'relative',\n      width: '100%',\n      height: '100%'\n    },\n    children: [mapError && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        backgroundColor: 'rgba(255, 0, 0, 0.8)',\n        color: 'white',\n        padding: '20px',\n        borderRadius: '5px',\n        zIndex: 2000,\n        maxWidth: '80%',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Error al cargar el mapa\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: mapError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Sugerencias: Verifica tu API key o recarga la p\\xE1gina\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        bottom: '20px',\n        left: '50%',\n        transform: 'translateX(-50%)',\n        backgroundColor: 'rgba(0, 0, 0, 0.7)',\n        color: 'white',\n        padding: '8px 16px',\n        borderRadius: '20px',\n        fontSize: '14px',\n        zIndex: 1000,\n        pointerEvents: 'none'\n      },\n      children: \"Haz doble clic en cualquier lugar del mapa para seleccionar una ubicaci\\xF3n\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '10px',\n        left: '10px',\n        right: '10px',\n        zIndex: 1000\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'relative'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: searchText,\n          onChange: handleSearchChange,\n          placeholder: \"Buscar ubicaci\\xF3n (ciudad, direcci\\xF3n, lugar)\",\n          style: {\n            width: '100%',\n            padding: '10px',\n            borderRadius: '4px',\n            border: '1px solid #ccc',\n            boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 11\n        }, this), searchText && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: clearSearch,\n          style: {\n            position: 'absolute',\n            right: '10px',\n            top: '50%',\n            transform: 'translateY(-50%)',\n            background: 'none',\n            border: 'none',\n            cursor: 'pointer',\n            fontSize: '16px'\n          },\n          children: \"\\u2715\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: 'white',\n          padding: '10px',\n          borderRadius: '0 0 4px 4px',\n          border: '1px solid #ccc',\n          borderTop: 'none',\n          textAlign: 'center'\n        },\n        children: \"Cargando sugerencias...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 11\n      }, this), suggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n        style: {\n          listStyle: 'none',\n          margin: '0',\n          padding: '0',\n          background: 'white',\n          border: '1px solid #ccc',\n          borderTop: 'none',\n          borderRadius: '0 0 4px 4px',\n          maxHeight: '200px',\n          overflowY: 'auto'\n        },\n        children: suggestions.map((suggestion, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleSuggestionClick(suggestion),\n          style: {\n            padding: '10px',\n            borderBottom: index < suggestions.length - 1 ? '1px solid #eee' : 'none',\n            cursor: 'pointer'\n          },\n          onMouseOver: e => e.target.style.backgroundColor = '#f5f5f5',\n          onMouseOut: e => e.target.style.backgroundColor = 'transparent',\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontWeight: 'bold'\n            },\n            children: suggestion.display_name.split(',')[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 525,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '12px',\n              color: '#666'\n            },\n            children: suggestion.display_name.split(',').slice(1).join(',')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '11px',\n              color: '#999',\n              fontStyle: 'italic'\n            },\n            children: suggestion.type\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 531,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapRef,\n      style: {\n        width: '100%',\n        height: '100%',\n        backgroundColor: '#f0f0f0'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 541,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 407,\n    columnNumber: 5\n  }, this);\n}\n_s(GoogleMap, \"gVWDSLVRElVOqF4+2rFpPUri9KY=\");\n_c = GoogleMap;\nvar _c;\n$RefreshReg$(_c, \"GoogleMap\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","jsxDEV","_jsxDEV","initialCenter","lat","lng","GoogleMap","_s","mapRef","googleMapRef","geocoderRef","markersRef","tempMarkerRef","searchText","setSearchText","suggestions","setSuggestions","loading","setLoading","selectedLocations","setSelectedLocations","mapError","setMapError","searchTimeoutRef","searchCacheRef","loadMap","window","google","maps","console","error","log","mapOptions","center","zoom","mapTypeControl","streetViewControl","fullscreenControl","map","Map","current","Geocoder","addListener","event","handleMapDoubleClick","latLng","Marker","position","title","message","script","document","createElement","src","async","defer","onload","onerror","body","appendChild","length","forEach","marker","setMap","opacity","geocode","location","results","status","address","formatted_address","newLocation","id","Date","now","name","address_components","short_name","fullName","prev","setCenter","createMarker","push","infoWindow","InfoWindow","content","open","setTimeout","removeBtn","getElementById","addEventListener","removeLocation","close","handleSearchChange","query","target","value","clearTimeout","places","service","AutocompleteService","getPlacePredictions","input","predictions","PlacesServiceStatus","OK","slice","prediction","place_id","display_name","description","type","getPlaceType","types","formattedResults","result","geometry","includes","handleSuggestionClick","suggestion","placesService","PlacesService","getDetails","placeId","fields","place","split","setZoom","locationId","markerIndex","findIndex","splice","filter","loc","clearSearch","style","width","height","children","top","left","transform","backgroundColor","color","padding","borderRadius","zIndex","maxWidth","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","bottom","fontSize","pointerEvents","right","onChange","placeholder","border","boxShadow","onClick","background","cursor","borderTop","listStyle","margin","maxHeight","overflowY","index","borderBottom","onMouseOver","e","onMouseOut","fontWeight","join","fontStyle","ref","_c","$RefreshReg$"],"sources":["C:/PROYECTOJOSE/my-fullstack-app/frontend/src/GoogleMap.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\r\n\r\nconst initialCenter = { lat: 7.89391, lng: -72.50782 };\r\n\r\nexport default function GoogleMap() {\r\n  const mapRef = useRef(null);\r\n  const googleMapRef = useRef(null);\r\n  const geocoderRef = useRef(null);\r\n  const markersRef = useRef([]);\r\n  const tempMarkerRef = useRef(null);\r\n  \r\n  const [searchText, setSearchText] = useState('');\r\n  const [suggestions, setSuggestions] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [selectedLocations, setSelectedLocations] = useState([]);\r\n  const [mapError, setMapError] = useState(null);\r\n  \r\n  // Referencia para el temporizador de debounce\r\n  const searchTimeoutRef = useRef(null);\r\n  // Cache para almacenar resultados de búsquedas previas\r\n  const searchCacheRef = useRef({});\r\n\r\n  // Inicializar Google Maps\r\n  useEffect(() => {\r\n    const loadMap = () => {\r\n      try {\r\n        // Verificar si la API de Google Maps se cargó correctamente\r\n        if (!window.google || !window.google.maps) {\r\n          console.error(\"Google Maps API no se cargó correctamente\");\r\n          setMapError(\"No se pudo cargar Google Maps. Verifica tu API key.\");\r\n          return;\r\n        }\r\n\r\n        console.log(\"Inicializando mapa de Google...\");\r\n        \r\n        const mapOptions = {\r\n          center: initialCenter,\r\n          zoom: 13,\r\n          mapTypeControl: true,\r\n          streetViewControl: true,\r\n          fullscreenControl: true,\r\n        };\r\n        \r\n        // Crear el mapa\r\n        const map = new window.google.maps.Map(mapRef.current, mapOptions);\r\n        googleMapRef.current = map;\r\n        \r\n        // Crear el geocoder\r\n        geocoderRef.current = new window.google.maps.Geocoder();\r\n        \r\n        // Configurar el evento de doble clic\r\n        map.addListener('dblclick', (event) => {\r\n          handleMapDoubleClick(event.latLng);\r\n        });\r\n\r\n        console.log(\"Mapa de Google inicializado con éxito\");\r\n        \r\n        // Añadir un marcador inicial para verificar que el mapa funciona\r\n        new window.google.maps.Marker({\r\n          position: initialCenter,\r\n          map,\r\n          title: 'Ubicación inicial',\r\n        });\r\n      } catch (error) {\r\n        console.error(\"Error al inicializar el mapa de Google:\", error);\r\n        setMapError(`Error al inicializar el mapa: ${error.message}`);\r\n      }\r\n    };\r\n\r\n    // Cargar la API de Google Maps si aún no está cargada\r\n    if (!window.google) {\r\n      console.log(\"Cargando la API de Google Maps...\");\r\n      \r\n      const script = document.createElement('script');\r\n      script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyDojbUyQ30EbzMwNRXKlFYxMQmqRtOw1Y0&libraries=places`;\r\n      script.async = true;\r\n      script.defer = true;\r\n      \r\n      script.onload = () => {\r\n        console.log(\"Script de Google Maps cargado correctamente\");\r\n        loadMap();\r\n      };\r\n      \r\n      script.onerror = (error) => {\r\n        console.error(\"Error al cargar el script de Google Maps:\", error);\r\n        setMapError(\"No se pudo cargar la API de Google Maps. Verifica tu conexión a internet o la API key.\");\r\n      };\r\n      \r\n      document.body.appendChild(script);\r\n    } else {\r\n      loadMap();\r\n    }\r\n    \r\n    // Limpieza\r\n    return () => {\r\n      // Limpiar marcadores si es necesario\r\n      if (markersRef.current.length > 0) {\r\n        markersRef.current.forEach(marker => {\r\n          if (marker.marker) marker.marker.setMap(null);\r\n        });\r\n      }\r\n      if (tempMarkerRef.current) {\r\n        tempMarkerRef.current.setMap(null);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Manejar el doble clic en el mapa\r\n  const handleMapDoubleClick = useCallback((latLng) => {\r\n    if (!googleMapRef.current || !geocoderRef.current) {\r\n      console.error(\"El mapa o el geocoder no están inicializados\");\r\n      return;\r\n    }\r\n    \r\n    setLoading(true);\r\n    \r\n    // Crear un marcador temporal mientras se obtiene la información\r\n    if (tempMarkerRef.current) {\r\n      tempMarkerRef.current.setMap(null);\r\n    }\r\n    \r\n    tempMarkerRef.current = new window.google.maps.Marker({\r\n      position: latLng,\r\n      map: googleMapRef.current,\r\n      opacity: 0.7,\r\n      title: 'Obteniendo información...'\r\n    });\r\n    \r\n    // Realizar geocodificación inversa para obtener la dirección\r\n    geocoderRef.current.geocode({ location: latLng }, (results, status) => {\r\n      if (status === 'OK' && results[0]) {\r\n        const address = results[0].formatted_address;\r\n        \r\n        // Actualizar el campo de búsqueda con la dirección encontrada\r\n        setSearchText(address);\r\n        \r\n        // Agregar la ubicación seleccionada a la lista\r\n        const newLocation = {\r\n          id: Date.now(),\r\n          position: latLng,\r\n          name: results[0].address_components[0].short_name,\r\n          fullName: address\r\n        };\r\n        \r\n        setSelectedLocations(prev => [...prev, newLocation]);\r\n        \r\n        // Actualizar centro del mapa\r\n        googleMapRef.current.setCenter(latLng);\r\n        \r\n        // Crear un marcador permanente\r\n        const marker = createMarker(newLocation);\r\n        markersRef.current.push(marker);\r\n        \r\n        // Eliminar el marcador temporal\r\n        if (tempMarkerRef.current) {\r\n          tempMarkerRef.current.setMap(null);\r\n          tempMarkerRef.current = null;\r\n        }\r\n      } else {\r\n        console.error('Geocoder failed due to: ' + status);\r\n        \r\n        // Eliminar el marcador temporal en caso de error\r\n        if (tempMarkerRef.current) {\r\n          tempMarkerRef.current.setMap(null);\r\n          tempMarkerRef.current = null;\r\n        }\r\n      }\r\n      \r\n      setLoading(false);\r\n    });\r\n  }, []);\r\n\r\n  // Crear un marcador para una ubicación\r\n  const createMarker = (location) => {\r\n    if (!googleMapRef.current) return null;\r\n    \r\n    const marker = new window.google.maps.Marker({\r\n      position: location.position,\r\n      map: googleMapRef.current,\r\n      title: location.name\r\n    });\r\n    \r\n    // Crear ventana de información\r\n    const infoWindow = new window.google.maps.InfoWindow({\r\n      content: `\r\n        <div>\r\n          <strong>${location.name}</strong>\r\n          <p style=\"font-size: 12px; margin: 5px 0\">${location.fullName}</p>\r\n          <button id=\"removeBtn-${location.id}\" style=\"padding: 3px 8px; background: #f44336; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 12px\">\r\n            Eliminar\r\n          </button>\r\n        </div>\r\n      `\r\n    });\r\n    \r\n    // Abrir ventana al hacer clic en el marcador\r\n    marker.addListener('click', () => {\r\n      infoWindow.open(googleMapRef.current, marker);\r\n      \r\n      // Añadir el listener del botón eliminar después de que se haya abierto la ventana\r\n      setTimeout(() => {\r\n        const removeBtn = document.getElementById(`removeBtn-${location.id}`);\r\n        if (removeBtn) {\r\n          removeBtn.addEventListener('click', () => {\r\n            removeLocation(location.id);\r\n            infoWindow.close();\r\n          });\r\n        }\r\n      }, 10);\r\n    });\r\n    \r\n    return { marker, infoWindow, id: location.id };\r\n  };\r\n\r\n  // Función para manejar la búsqueda\r\n  const handleSearchChange = (event) => {\r\n    const query = event.target.value;\r\n    setSearchText(query);\r\n    \r\n    // Limpiar cualquier temporizador existente\r\n    if (searchTimeoutRef.current) {\r\n      clearTimeout(searchTimeoutRef.current);\r\n    }\r\n    \r\n    if (query.length > 2) { // Solo empezar a buscar después de 3 caracteres\r\n      setLoading(true);\r\n      \r\n      // Verificar si tenemos resultados en caché\r\n      if (searchCacheRef.current[query]) {\r\n        setSuggestions(searchCacheRef.current[query]);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      \r\n      // Validar que la API esté cargada\r\n      if (!window.google || !window.google.maps) {\r\n        setLoading(false);\r\n        setMapError(\"API de Google Maps no disponible\");\r\n        return;\r\n      }\r\n      \r\n      // Usar el servicio de Places de Google para autocomplete\r\n      searchTimeoutRef.current = setTimeout(() => {\r\n        try {\r\n          // Si el servicio de Places ya está disponible\r\n          if (window.google && window.google.maps && window.google.maps.places) {\r\n            const service = new window.google.maps.places.AutocompleteService();\r\n            service.getPlacePredictions({ input: query }, (predictions, status) => {\r\n              if (status === window.google.maps.places.PlacesServiceStatus.OK && predictions) {\r\n                // Convertir las predicciones al formato que espera nuestro componente\r\n                const results = predictions.slice(0, 3).map(prediction => ({\r\n                  place_id: prediction.place_id,\r\n                  display_name: prediction.description,\r\n                  type: getPlaceType(prediction.types || [])\r\n                }));\r\n                \r\n                // Guardar en caché\r\n                searchCacheRef.current[query] = results;\r\n                setSuggestions(results);\r\n              } else {\r\n                setSuggestions([]);\r\n              }\r\n              setLoading(false);\r\n            });\r\n          } else if (geocoderRef.current) {\r\n            // Fallback a geocodificación simple si Places no está disponible\r\n            geocoderRef.current.geocode({ address: query }, (results, status) => {\r\n              if (status === 'OK') {\r\n                const formattedResults = results.slice(0, 3).map(result => ({\r\n                  place_id: result.place_id,\r\n                  display_name: result.formatted_address,\r\n                  position: result.geometry.location,\r\n                  type: getPlaceType(result.types || [])\r\n                }));\r\n                \r\n                // Guardar en caché\r\n                searchCacheRef.current[query] = formattedResults;\r\n                setSuggestions(formattedResults);\r\n              } else {\r\n                setSuggestions([]);\r\n              }\r\n              setLoading(false);\r\n            });\r\n          } else {\r\n            setSuggestions([]);\r\n            setLoading(false);\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error en la búsqueda:\", error);\r\n          setSuggestions([]);\r\n          setLoading(false);\r\n        }\r\n      }, 300);\r\n    } else {\r\n      setSuggestions([]);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Determinar el tipo de lugar basado en los tipos de Google\r\n  const getPlaceType = (types) => {\r\n    if (!types || types.length === 0) return 'Lugar';\r\n    \r\n    if (types.includes('locality') || types.includes('administrative_area_level_1')) {\r\n      return 'Ciudad';\r\n    } else if (types.includes('establishment')) {\r\n      return 'Establecimiento';\r\n    } else if (types.includes('street_address') || types.includes('route')) {\r\n      return 'Dirección';\r\n    }\r\n    return 'Lugar';\r\n  };\r\n\r\n  // Manejar la selección de una sugerencia\r\n  const handleSuggestionClick = (suggestion) => {\r\n    if (!googleMapRef.current) {\r\n      console.error(\"El mapa no está inicializado\");\r\n      return;\r\n    }\r\n    \r\n    setLoading(true);\r\n    \r\n    try {\r\n      // Si tenemos un place_id, usamos el servicio de Places para obtener los detalles\r\n      if (suggestion.place_id && window.google.maps.places) {\r\n        // Crear PlacesService (requiere un elemento del DOM)\r\n        const placesService = new window.google.maps.places.PlacesService(googleMapRef.current);\r\n        \r\n        placesService.getDetails({ placeId: suggestion.place_id, fields: ['name', 'formatted_address', 'geometry'] }, (place, status) => {\r\n          if (status === window.google.maps.places.PlacesServiceStatus.OK) {\r\n            // Crear una ubicación con los detalles del lugar\r\n            const newLocation = {\r\n              id: Date.now(),\r\n              position: place.geometry.location,\r\n              name: place.name || suggestion.display_name.split(',')[0],\r\n              fullName: place.formatted_address || suggestion.display_name\r\n            };\r\n            \r\n            // Agregar la ubicación a la lista\r\n            setSelectedLocations(prev => [...prev, newLocation]);\r\n            \r\n            // Centrar el mapa en la ubicación\r\n            googleMapRef.current.setCenter(place.geometry.location);\r\n            googleMapRef.current.setZoom(15);\r\n            \r\n            // Crear un marcador para la ubicación\r\n            const marker = createMarker(newLocation);\r\n            if (marker) markersRef.current.push(marker);\r\n            \r\n            // Actualizar el campo de búsqueda\r\n            setSearchText(place.formatted_address || suggestion.display_name);\r\n          }\r\n          \r\n          setLoading(false);\r\n          setSuggestions([]);\r\n        });\r\n      } else if (suggestion.position) {\r\n        // Si ya tenemos la posición (del fallback de geocodificación)\r\n        const newLocation = {\r\n          id: Date.now(),\r\n          position: suggestion.position,\r\n          name: suggestion.display_name.split(',')[0],\r\n          fullName: suggestion.display_name\r\n        };\r\n        \r\n        setSelectedLocations(prev => [...prev, newLocation]);\r\n        googleMapRef.current.setCenter(suggestion.position);\r\n        googleMapRef.current.setZoom(15);\r\n        \r\n        const marker = createMarker(newLocation);\r\n        if (marker) markersRef.current.push(marker);\r\n        \r\n        setSearchText(suggestion.display_name);\r\n        setLoading(false);\r\n        setSuggestions([]);\r\n      } else {\r\n        setLoading(false);\r\n        setSuggestions([]);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error al seleccionar sugerencia:\", error);\r\n      setLoading(false);\r\n      setSuggestions([]);\r\n    }\r\n  };\r\n\r\n  // Función para eliminar una ubicación\r\n  const removeLocation = (locationId) => {\r\n    // Eliminar el marcador del mapa\r\n    const markerIndex = markersRef.current.findIndex(marker => marker.id === locationId);\r\n    if (markerIndex !== -1) {\r\n      markersRef.current[markerIndex].marker.setMap(null);\r\n      markersRef.current.splice(markerIndex, 1);\r\n    }\r\n    \r\n    // Eliminar la ubicación de la lista\r\n    setSelectedLocations(prev => prev.filter(loc => loc.id !== locationId));\r\n  };\r\n\r\n  // Función para limpiar el campo de búsqueda\r\n  const clearSearch = () => {\r\n    setSearchText('');\r\n    setSuggestions([]);\r\n  };\r\n\r\n  return (\r\n    <div style={{ position: 'relative', width: '100%', height: '100%' }}>\r\n      {/* Mensaje de error si existe */}\r\n      {mapError && (\r\n        <div style={{\r\n          position: 'absolute',\r\n          top: '50%',\r\n          left: '50%',\r\n          transform: 'translate(-50%, -50%)',\r\n          backgroundColor: 'rgba(255, 0, 0, 0.8)',\r\n          color: 'white',\r\n          padding: '20px',\r\n          borderRadius: '5px',\r\n          zIndex: 2000,\r\n          maxWidth: '80%',\r\n          textAlign: 'center'\r\n        }}>\r\n          <h3>Error al cargar el mapa</h3>\r\n          <p>{mapError}</p>\r\n          <p>Sugerencias: Verifica tu API key o recarga la página</p>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Mensaje de ayuda para el usuario */}\r\n      <div style={{ \r\n        position: 'absolute',\r\n        bottom: '20px',\r\n        left: '50%',\r\n        transform: 'translateX(-50%)',\r\n        backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n        color: 'white',\r\n        padding: '8px 16px',\r\n        borderRadius: '20px',\r\n        fontSize: '14px',\r\n        zIndex: 1000,\r\n        pointerEvents: 'none'\r\n      }}>\r\n        Haz doble clic en cualquier lugar del mapa para seleccionar una ubicación\r\n      </div>\r\n      \r\n      {/* Barra de búsqueda */}\r\n      <div style={{ \r\n        position: 'absolute', \r\n        top: '10px', \r\n        left: '10px', \r\n        right: '10px', \r\n        zIndex: 1000 \r\n      }}>\r\n        <div style={{ position: 'relative' }}>\r\n          <input\r\n            type=\"text\"\r\n            value={searchText}\r\n            onChange={handleSearchChange}\r\n            placeholder=\"Buscar ubicación (ciudad, dirección, lugar)\"\r\n            style={{ \r\n              width: '100%', \r\n              padding: '10px', \r\n              borderRadius: '4px',\r\n              border: '1px solid #ccc',\r\n              boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\r\n            }}\r\n          />\r\n          \r\n          {searchText && (\r\n            <button \r\n              onClick={clearSearch}\r\n              style={{\r\n                position: 'absolute',\r\n                right: '10px',\r\n                top: '50%',\r\n                transform: 'translateY(-50%)',\r\n                background: 'none',\r\n                border: 'none',\r\n                cursor: 'pointer',\r\n                fontSize: '16px'\r\n              }}\r\n            >\r\n              ✕\r\n            </button>\r\n          )}\r\n        </div>\r\n        \r\n        {loading && (\r\n          <div style={{ \r\n            background: 'white', \r\n            padding: '10px', \r\n            borderRadius: '0 0 4px 4px',\r\n            border: '1px solid #ccc',\r\n            borderTop: 'none',\r\n            textAlign: 'center'\r\n          }}>\r\n            Cargando sugerencias...\r\n          </div>\r\n        )}\r\n        \r\n        {suggestions.length > 0 && (\r\n          <ul style={{ \r\n            listStyle: 'none',\r\n            margin: '0',\r\n            padding: '0',\r\n            background: 'white',\r\n            border: '1px solid #ccc',\r\n            borderTop: 'none',\r\n            borderRadius: '0 0 4px 4px',\r\n            maxHeight: '200px',\r\n            overflowY: 'auto'\r\n          }}>\r\n            {suggestions.map((suggestion, index) => (\r\n              <li \r\n                key={index} \r\n                onClick={() => handleSuggestionClick(suggestion)}\r\n                style={{ \r\n                  padding: '10px',\r\n                  borderBottom: index < suggestions.length - 1 ? '1px solid #eee' : 'none',\r\n                  cursor: 'pointer'\r\n                }}\r\n                onMouseOver={(e) => e.target.style.backgroundColor = '#f5f5f5'}\r\n                onMouseOut={(e) => e.target.style.backgroundColor = 'transparent'}\r\n              >\r\n                <div style={{ fontWeight: 'bold' }}>\r\n                  {suggestion.display_name.split(',')[0]}\r\n                </div>\r\n                <div style={{ fontSize: '12px', color: '#666' }}>\r\n                  {suggestion.display_name.split(',').slice(1).join(',')}\r\n                </div>\r\n                <div style={{ fontSize: '11px', color: '#999', fontStyle: 'italic' }}>\r\n                  {suggestion.type}\r\n                </div>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n      </div>\r\n      \r\n      {/* Contenedor del mapa de Google */}\r\n      <div\r\n        ref={mapRef}\r\n        style={{\r\n          width: '100%',\r\n          height: '100%',\r\n          backgroundColor: '#f0f0f0'\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}