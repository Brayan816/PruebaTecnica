{"ast":null,"code":"var _jsxFileName = \"C:\\\\PROYECTOJOSE\\\\my-fullstack-app\\\\frontend\\\\src\\\\GoogleMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialCenter = {\n  lat: 7.89391,\n  lng: -72.50782\n};\nexport default function GoogleMap() {\n  _s();\n  const mapRef = useRef(null);\n  const googleMapRef = useRef(null);\n  const geocoderRef = useRef(null);\n  const markersRef = useRef([]);\n  const tempMarkerRef = useRef(null);\n  const autoCompleteServiceRef = useRef(null);\n  const placesServiceRef = useRef(null);\n  const [searchText, setSearchText] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedLocations, setSelectedLocations] = useState([]);\n  const [mapError, setMapError] = useState(null);\n\n  // Reference for debounce timer\n  const searchTimeoutRef = useRef(null);\n  // Cache to store previous search results\n  const searchCacheRef = useRef({});\n\n  // Initialize Google Maps\n  useEffect(() => {\n    const loadMap = () => {\n      try {\n        // Check if Google Maps API loaded correctly\n        if (!window.google || !window.google.maps) {\n          console.error(\"Google Maps API did not load correctly\");\n          setMapError(\"Could not load Google Maps. Verify your API key.\");\n          return;\n        }\n        console.log(\"Initializing Google Maps...\");\n        const mapOptions = {\n          center: initialCenter,\n          zoom: 13,\n          mapTypeControl: true,\n          streetViewControl: true,\n          fullscreenControl: true\n        };\n\n        // Create the map\n        const map = new window.google.maps.Map(mapRef.current, mapOptions);\n        googleMapRef.current = map;\n\n        // Create the geocoder\n        geocoderRef.current = new window.google.maps.Geocoder();\n\n        // Initialize Places services if available\n        if (window.google.maps.places) {\n          autoCompleteServiceRef.current = new window.google.maps.places.AutocompleteService();\n          placesServiceRef.current = new window.google.maps.places.PlacesService(map);\n        }\n\n        // Set up double-click event\n        map.addListener('dblclick', event => {\n          handleMapDoubleClick(event.latLng);\n        });\n        console.log(\"Google Maps initialized successfully\");\n\n        // Add an initial marker to verify map is working\n        new window.google.maps.Marker({\n          position: initialCenter,\n          map,\n          title: 'Initial location'\n        });\n      } catch (error) {\n        console.error(\"Error initializing Google Maps:\", error);\n        setMapError(`Error initializing map: ${error.message}`);\n      }\n    };\n\n    // Load Google Maps API if not already loaded\n    if (!window.google) {\n      console.log(\"Loading Google Maps API...\");\n      const script = document.createElement('script');\n      script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyDojbUyQ30EbzMwNRXKlFYxMQmqRtOw1Y0&libraries=places`;\n      script.async = true;\n      script.defer = true;\n      script.onload = () => {\n        console.log(\"Google Maps script loaded correctly\");\n        loadMap();\n      };\n      script.onerror = error => {\n        console.error(\"Error loading Google Maps script:\", error);\n        setMapError(\"Could not load Google Maps API. Check your internet connection or API key.\");\n      };\n      document.body.appendChild(script);\n    } else {\n      loadMap();\n    }\n\n    // Cleanup\n    return () => {\n      // Clear markers if necessary\n      if (markersRef.current.length > 0) {\n        markersRef.current.forEach(marker => {\n          if (marker.marker) marker.marker.setMap(null);\n        });\n      }\n      if (tempMarkerRef.current) {\n        tempMarkerRef.current.setMap(null);\n      }\n    };\n  }, []);\n\n  // Handle double-click on map\n  const handleMapDoubleClick = useCallback(latLng => {\n    if (!googleMapRef.current || !geocoderRef.current) {\n      console.error(\"Map or geocoder not initialized\");\n      return;\n    }\n    setLoading(true);\n\n    // Create a temporary marker while getting information\n    if (tempMarkerRef.current) {\n      tempMarkerRef.current.setMap(null);\n    }\n    tempMarkerRef.current = new window.google.maps.Marker({\n      position: latLng,\n      map: googleMapRef.current,\n      opacity: 0.7,\n      title: 'Getting information...'\n    });\n\n    // Perform reverse geocoding to get the address\n    geocoderRef.current.geocode({\n      location: latLng\n    }, (results, status) => {\n      if (status === 'OK' && results[0]) {\n        const address = results[0].formatted_address;\n\n        // Update search field with the found address\n        setSearchText(address);\n\n        // Add the selected location to the list\n        const newLocation = {\n          id: Date.now(),\n          position: latLng,\n          name: results[0].address_components[0].short_name,\n          fullName: address\n        };\n        setSelectedLocations(prev => [...prev, newLocation]);\n\n        // Update map center\n        googleMapRef.current.setCenter(latLng);\n\n        // Create a permanent marker\n        const marker = createMarker(newLocation);\n        markersRef.current.push(marker);\n\n        // Remove the temporary marker\n        if (tempMarkerRef.current) {\n          tempMarkerRef.current.setMap(null);\n          tempMarkerRef.current = null;\n        }\n      } else {\n        console.error('Geocoder failed due to: ' + status);\n\n        // Remove temporary marker in case of error\n        if (tempMarkerRef.current) {\n          tempMarkerRef.current.setMap(null);\n          tempMarkerRef.current = null;\n        }\n      }\n      setLoading(false);\n    });\n  }, []);\n\n  // Create a marker for a location\n  const createMarker = location => {\n    if (!googleMapRef.current) return null;\n    const marker = new window.google.maps.Marker({\n      position: location.position,\n      map: googleMapRef.current,\n      title: location.name\n    });\n\n    // Create info window\n    const infoWindow = new window.google.maps.InfoWindow({\n      content: `\n        <div>\n          <strong>${location.name}</strong>\n          <p style=\"font-size: 12px; margin: 5px 0\">${location.fullName}</p>\n          <button id=\"removeBtn-${location.id}\" style=\"padding: 3px 8px; background: #f44336; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 12px\">\n            Remove\n          </button>\n        </div>\n      `\n    });\n\n    // Open window when clicking on marker\n    marker.addListener('click', () => {\n      infoWindow.open(googleMapRef.current, marker);\n\n      // Add the remove button listener after window has opened\n      setTimeout(() => {\n        const removeBtn = document.getElementById(`removeBtn-${location.id}`);\n        if (removeBtn) {\n          removeBtn.addEventListener('click', () => {\n            removeLocation(location.id);\n            infoWindow.close();\n          });\n        }\n      }, 10);\n    });\n    return {\n      marker,\n      infoWindow,\n      id: location.id\n    };\n  };\n\n  // Function to handle search\n  const handleSearchChange = event => {\n    const query = event.target.value;\n    setSearchText(query);\n\n    // Clear any existing timers\n    if (searchTimeoutRef.current) {\n      clearTimeout(searchTimeoutRef.current);\n    }\n    if (query.length > 2) {\n      // Only start searching after 3 characters\n      setLoading(true);\n\n      // Check if we have cached results\n      if (searchCacheRef.current[query]) {\n        setSuggestions(searchCacheRef.current[query]);\n        setLoading(false);\n        return;\n      }\n\n      // Validate that the API is loaded\n      if (!window.google || !window.google.maps) {\n        setLoading(false);\n        setMapError(\"Google Maps API not available\");\n        return;\n      }\n\n      // Use Google Places service for autocomplete\n      searchTimeoutRef.current = setTimeout(() => {\n        try {\n          // If Places service is available\n          if (autoCompleteServiceRef.current) {\n            autoCompleteServiceRef.current.getPlacePredictions({\n              input: query\n            }, (predictions, status) => {\n              if (status === window.google.maps.places.PlacesServiceStatus.OK && predictions) {\n                // Convert predictions to the format our component expects\n                const results = predictions.slice(0, 5).map(prediction => ({\n                  place_id: prediction.place_id,\n                  display_name: prediction.description,\n                  type: getPlaceType(prediction.types || [])\n                }));\n\n                // Save to cache\n                searchCacheRef.current[query] = results;\n                setSuggestions(results);\n              } else {\n                setSuggestions([]);\n              }\n              setLoading(false);\n            });\n          } else if (geocoderRef.current) {\n            // Fallback to simple geocoding if Places isn't available\n            geocoderRef.current.geocode({\n              address: query\n            }, (results, status) => {\n              if (status === 'OK') {\n                const formattedResults = results.slice(0, 5).map(result => ({\n                  place_id: result.place_id,\n                  display_name: result.formatted_address,\n                  position: result.geometry.location,\n                  type: getPlaceType(result.types || [])\n                }));\n\n                // Save to cache\n                searchCacheRef.current[query] = formattedResults;\n                setSuggestions(formattedResults);\n              } else {\n                setSuggestions([]);\n              }\n              setLoading(false);\n            });\n          } else {\n            setSuggestions([]);\n            setLoading(false);\n          }\n        } catch (error) {\n          console.error(\"Error in search:\", error);\n          setSuggestions([]);\n          setLoading(false);\n        }\n      }, 300);\n    } else {\n      setSuggestions([]);\n      setLoading(false);\n    }\n  };\n\n  // Determine place type based on Google types\n  const getPlaceType = types => {\n    if (!types || types.length === 0) return 'Place';\n    if (types.includes('locality') || types.includes('administrative_area_level_1')) {\n      return 'City';\n    } else if (types.includes('establishment')) {\n      return 'Establishment';\n    } else if (types.includes('street_address') || types.includes('route')) {\n      return 'Address';\n    }\n    return 'Place';\n  };\n\n  // Handle suggestion selection\n  const handleSuggestionClick = suggestion => {\n    if (!googleMapRef.current) {\n      console.error(\"Map not initialized\");\n      return;\n    }\n    setLoading(true);\n    try {\n      // If we have a place_id, use Places service to get details\n      if (suggestion.place_id && placesServiceRef.current) {\n        placesServiceRef.current.getDetails({\n          placeId: suggestion.place_id,\n          fields: ['name', 'formatted_address', 'geometry']\n        }, (place, status) => {\n          if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n            // Create a location with place details\n            const newLocation = {\n              id: Date.now(),\n              position: place.geometry.location,\n              name: place.name || suggestion.display_name.split(',')[0],\n              fullName: place.formatted_address || suggestion.display_name\n            };\n\n            // Add location to the list\n            setSelectedLocations(prev => [...prev, newLocation]);\n\n            // Center map on location\n            googleMapRef.current.setCenter(place.geometry.location);\n            googleMapRef.current.setZoom(15);\n\n            // Create a marker for the location\n            const marker = createMarker(newLocation);\n            if (marker) markersRef.current.push(marker);\n\n            // Update search field\n            setSearchText(place.formatted_address || suggestion.display_name);\n          }\n          setLoading(false);\n          setSuggestions([]);\n        });\n      } else if (suggestion.position) {\n        // If we already have the position (from geocoding fallback)\n        const newLocation = {\n          id: Date.now(),\n          position: suggestion.position,\n          name: suggestion.display_name.split(',')[0],\n          fullName: suggestion.display_name\n        };\n        setSelectedLocations(prev => [...prev, newLocation]);\n        googleMapRef.current.setCenter(suggestion.position);\n        googleMapRef.current.setZoom(15);\n        const marker = createMarker(newLocation);\n        if (marker) markersRef.current.push(marker);\n        setSearchText(suggestion.display_name);\n        setLoading(false);\n        setSuggestions([]);\n      } else {\n        setLoading(false);\n        setSuggestions([]);\n      }\n    } catch (error) {\n      console.error(\"Error selecting suggestion:\", error);\n      setLoading(false);\n      setSuggestions([]);\n    }\n  };\n\n  // Function to remove a location\n  const removeLocation = locationId => {\n    // Remove the marker from the map\n    const markerIndex = markersRef.current.findIndex(marker => marker.id === locationId);\n    if (markerIndex !== -1) {\n      markersRef.current[markerIndex].marker.setMap(null);\n      markersRef.current.splice(markerIndex, 1);\n    }\n\n    // Remove the location from the list\n    setSelectedLocations(prev => prev.filter(loc => loc.id !== locationId));\n  };\n\n  // Function to clear search field\n  const clearSearch = () => {\n    setSearchText('');\n    setSuggestions([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'relative',\n      width: '100%',\n      height: '100%'\n    },\n    children: [mapError && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        backgroundColor: 'rgba(255, 0, 0, 0.8)',\n        color: 'white',\n        padding: '20px',\n        borderRadius: '5px',\n        zIndex: 2000,\n        maxWidth: '80%',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Error loading the map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: mapError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Suggestions: Verify your API key or reload the page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        bottom: '20px',\n        left: '50%',\n        transform: 'translateX(-50%)',\n        backgroundColor: 'rgba(0, 0, 0, 0.7)',\n        color: 'white',\n        padding: '8px 16px',\n        borderRadius: '20px',\n        fontSize: '14px',\n        zIndex: 1000,\n        pointerEvents: 'none'\n      },\n      children: \"Double-click anywhere on the map to select a location\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '10px',\n        left: '10px',\n        right: '10px',\n        zIndex: 1000\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'relative'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: searchText,\n          onChange: handleSearchChange,\n          placeholder: \"Search location (city, address, place)\",\n          style: {\n            width: '100%',\n            padding: '10px',\n            borderRadius: '4px',\n            border: '1px solid #ccc',\n            boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 11\n        }, this), searchText && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: clearSearch,\n          style: {\n            position: 'absolute',\n            right: '10px',\n            top: '50%',\n            transform: 'translateY(-50%)',\n            background: 'none',\n            border: 'none',\n            cursor: 'pointer',\n            fontSize: '16px'\n          },\n          children: \"\\u2715\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: 'white',\n          padding: '10px',\n          borderRadius: '0 0 4px 4px',\n          border: '1px solid #ccc',\n          borderTop: 'none',\n          textAlign: 'center'\n        },\n        children: \"Loading suggestions...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 11\n      }, this), suggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n        style: {\n          listStyle: 'none',\n          margin: '0',\n          padding: '0',\n          background: 'white',\n          border: '1px solid #ccc',\n          borderTop: 'none',\n          borderRadius: '0 0 4px 4px',\n          maxHeight: '200px',\n          overflowY: 'auto'\n        },\n        children: suggestions.map((suggestion, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleSuggestionClick(suggestion),\n          style: {\n            padding: '10px',\n            borderBottom: index < suggestions.length - 1 ? '1px solid #eee' : 'none',\n            cursor: 'pointer'\n          },\n          onMouseOver: e => e.target.style.backgroundColor = '#f5f5f5',\n          onMouseOut: e => e.target.style.backgroundColor = 'transparent',\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontWeight: 'bold'\n            },\n            children: suggestion.display_name.split(',')[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 538,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '12px',\n              color: '#666'\n            },\n            children: suggestion.display_name.split(',').slice(1).join(',')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 541,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '11px',\n              color: '#999',\n              fontStyle: 'italic'\n            },\n            children: suggestion.type\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 544,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapRef,\n      style: {\n        width: '100%',\n        height: '100%',\n        backgroundColor: '#f0f0f0'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 554,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 420,\n    columnNumber: 5\n  }, this);\n}\n_s(GoogleMap, \"mS5pTvz6tyrViv+64M/hjWXq9hg=\");\n_c = GoogleMap;\nvar _c;\n$RefreshReg$(_c, \"GoogleMap\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","jsxDEV","_jsxDEV","initialCenter","lat","lng","GoogleMap","_s","mapRef","googleMapRef","geocoderRef","markersRef","tempMarkerRef","autoCompleteServiceRef","placesServiceRef","searchText","setSearchText","suggestions","setSuggestions","loading","setLoading","selectedLocations","setSelectedLocations","mapError","setMapError","searchTimeoutRef","searchCacheRef","loadMap","window","google","maps","console","error","log","mapOptions","center","zoom","mapTypeControl","streetViewControl","fullscreenControl","map","Map","current","Geocoder","places","AutocompleteService","PlacesService","addListener","event","handleMapDoubleClick","latLng","Marker","position","title","message","script","document","createElement","src","async","defer","onload","onerror","body","appendChild","length","forEach","marker","setMap","opacity","geocode","location","results","status","address","formatted_address","newLocation","id","Date","now","name","address_components","short_name","fullName","prev","setCenter","createMarker","push","infoWindow","InfoWindow","content","open","setTimeout","removeBtn","getElementById","addEventListener","removeLocation","close","handleSearchChange","query","target","value","clearTimeout","getPlacePredictions","input","predictions","PlacesServiceStatus","OK","slice","prediction","place_id","display_name","description","type","getPlaceType","types","formattedResults","result","geometry","includes","handleSuggestionClick","suggestion","getDetails","placeId","fields","place","split","setZoom","locationId","markerIndex","findIndex","splice","filter","loc","clearSearch","style","width","height","children","top","left","transform","backgroundColor","color","padding","borderRadius","zIndex","maxWidth","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","bottom","fontSize","pointerEvents","right","onChange","placeholder","border","boxShadow","onClick","background","cursor","borderTop","listStyle","margin","maxHeight","overflowY","index","borderBottom","onMouseOver","e","onMouseOut","fontWeight","join","fontStyle","ref","_c","$RefreshReg$"],"sources":["C:/PROYECTOJOSE/my-fullstack-app/frontend/src/GoogleMap.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\r\n\r\nconst initialCenter = { lat: 7.89391, lng: -72.50782 };\r\n\r\nexport default function GoogleMap() {\r\n  const mapRef = useRef(null);\r\n  const googleMapRef = useRef(null);\r\n  const geocoderRef = useRef(null);\r\n  const markersRef = useRef([]);\r\n  const tempMarkerRef = useRef(null);\r\n  const autoCompleteServiceRef = useRef(null);\r\n  const placesServiceRef = useRef(null);\r\n  \r\n  const [searchText, setSearchText] = useState('');\r\n  const [suggestions, setSuggestions] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [selectedLocations, setSelectedLocations] = useState([]);\r\n  const [mapError, setMapError] = useState(null);\r\n  \r\n  // Reference for debounce timer\r\n  const searchTimeoutRef = useRef(null);\r\n  // Cache to store previous search results\r\n  const searchCacheRef = useRef({});\r\n\r\n  // Initialize Google Maps\r\n  useEffect(() => {\r\n    const loadMap = () => {\r\n      try {\r\n        // Check if Google Maps API loaded correctly\r\n        if (!window.google || !window.google.maps) {\r\n          console.error(\"Google Maps API did not load correctly\");\r\n          setMapError(\"Could not load Google Maps. Verify your API key.\");\r\n          return;\r\n        }\r\n\r\n        console.log(\"Initializing Google Maps...\");\r\n        \r\n        const mapOptions = {\r\n          center: initialCenter,\r\n          zoom: 13,\r\n          mapTypeControl: true,\r\n          streetViewControl: true,\r\n          fullscreenControl: true,\r\n        };\r\n        \r\n        // Create the map\r\n        const map = new window.google.maps.Map(mapRef.current, mapOptions);\r\n        googleMapRef.current = map;\r\n        \r\n        // Create the geocoder\r\n        geocoderRef.current = new window.google.maps.Geocoder();\r\n        \r\n        // Initialize Places services if available\r\n        if (window.google.maps.places) {\r\n          autoCompleteServiceRef.current = new window.google.maps.places.AutocompleteService();\r\n          placesServiceRef.current = new window.google.maps.places.PlacesService(map);\r\n        }\r\n        \r\n        // Set up double-click event\r\n        map.addListener('dblclick', (event) => {\r\n          handleMapDoubleClick(event.latLng);\r\n        });\r\n\r\n        console.log(\"Google Maps initialized successfully\");\r\n        \r\n        // Add an initial marker to verify map is working\r\n        new window.google.maps.Marker({\r\n          position: initialCenter,\r\n          map,\r\n          title: 'Initial location',\r\n        });\r\n      } catch (error) {\r\n        console.error(\"Error initializing Google Maps:\", error);\r\n        setMapError(`Error initializing map: ${error.message}`);\r\n      }\r\n    };\r\n\r\n    // Load Google Maps API if not already loaded\r\n    if (!window.google) {\r\n      console.log(\"Loading Google Maps API...\");\r\n      \r\n      const script = document.createElement('script');\r\n      script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyDojbUyQ30EbzMwNRXKlFYxMQmqRtOw1Y0&libraries=places`;\r\n      script.async = true;\r\n      script.defer = true;\r\n      \r\n      script.onload = () => {\r\n        console.log(\"Google Maps script loaded correctly\");\r\n        loadMap();\r\n      };\r\n      \r\n      script.onerror = (error) => {\r\n        console.error(\"Error loading Google Maps script:\", error);\r\n        setMapError(\"Could not load Google Maps API. Check your internet connection or API key.\");\r\n      };\r\n      \r\n      document.body.appendChild(script);\r\n    } else {\r\n      loadMap();\r\n    }\r\n    \r\n    // Cleanup\r\n    return () => {\r\n      // Clear markers if necessary\r\n      if (markersRef.current.length > 0) {\r\n        markersRef.current.forEach(marker => {\r\n          if (marker.marker) marker.marker.setMap(null);\r\n        });\r\n      }\r\n      if (tempMarkerRef.current) {\r\n        tempMarkerRef.current.setMap(null);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Handle double-click on map\r\n  const handleMapDoubleClick = useCallback((latLng) => {\r\n    if (!googleMapRef.current || !geocoderRef.current) {\r\n      console.error(\"Map or geocoder not initialized\");\r\n      return;\r\n    }\r\n    \r\n    setLoading(true);\r\n    \r\n    // Create a temporary marker while getting information\r\n    if (tempMarkerRef.current) {\r\n      tempMarkerRef.current.setMap(null);\r\n    }\r\n    \r\n    tempMarkerRef.current = new window.google.maps.Marker({\r\n      position: latLng,\r\n      map: googleMapRef.current,\r\n      opacity: 0.7,\r\n      title: 'Getting information...'\r\n    });\r\n    \r\n    // Perform reverse geocoding to get the address\r\n    geocoderRef.current.geocode({ location: latLng }, (results, status) => {\r\n      if (status === 'OK' && results[0]) {\r\n        const address = results[0].formatted_address;\r\n        \r\n        // Update search field with the found address\r\n        setSearchText(address);\r\n        \r\n        // Add the selected location to the list\r\n        const newLocation = {\r\n          id: Date.now(),\r\n          position: latLng,\r\n          name: results[0].address_components[0].short_name,\r\n          fullName: address\r\n        };\r\n        \r\n        setSelectedLocations(prev => [...prev, newLocation]);\r\n        \r\n        // Update map center\r\n        googleMapRef.current.setCenter(latLng);\r\n        \r\n        // Create a permanent marker\r\n        const marker = createMarker(newLocation);\r\n        markersRef.current.push(marker);\r\n        \r\n        // Remove the temporary marker\r\n        if (tempMarkerRef.current) {\r\n          tempMarkerRef.current.setMap(null);\r\n          tempMarkerRef.current = null;\r\n        }\r\n      } else {\r\n        console.error('Geocoder failed due to: ' + status);\r\n        \r\n        // Remove temporary marker in case of error\r\n        if (tempMarkerRef.current) {\r\n          tempMarkerRef.current.setMap(null);\r\n          tempMarkerRef.current = null;\r\n        }\r\n      }\r\n      \r\n      setLoading(false);\r\n    });\r\n  }, []);\r\n\r\n  // Create a marker for a location\r\n  const createMarker = (location) => {\r\n    if (!googleMapRef.current) return null;\r\n    \r\n    const marker = new window.google.maps.Marker({\r\n      position: location.position,\r\n      map: googleMapRef.current,\r\n      title: location.name\r\n    });\r\n    \r\n    // Create info window\r\n    const infoWindow = new window.google.maps.InfoWindow({\r\n      content: `\r\n        <div>\r\n          <strong>${location.name}</strong>\r\n          <p style=\"font-size: 12px; margin: 5px 0\">${location.fullName}</p>\r\n          <button id=\"removeBtn-${location.id}\" style=\"padding: 3px 8px; background: #f44336; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 12px\">\r\n            Remove\r\n          </button>\r\n        </div>\r\n      `\r\n    });\r\n    \r\n    // Open window when clicking on marker\r\n    marker.addListener('click', () => {\r\n      infoWindow.open(googleMapRef.current, marker);\r\n      \r\n      // Add the remove button listener after window has opened\r\n      setTimeout(() => {\r\n        const removeBtn = document.getElementById(`removeBtn-${location.id}`);\r\n        if (removeBtn) {\r\n          removeBtn.addEventListener('click', () => {\r\n            removeLocation(location.id);\r\n            infoWindow.close();\r\n          });\r\n        }\r\n      }, 10);\r\n    });\r\n    \r\n    return { marker, infoWindow, id: location.id };\r\n  };\r\n\r\n  // Function to handle search\r\n  const handleSearchChange = (event) => {\r\n    const query = event.target.value;\r\n    setSearchText(query);\r\n    \r\n    // Clear any existing timers\r\n    if (searchTimeoutRef.current) {\r\n      clearTimeout(searchTimeoutRef.current);\r\n    }\r\n    \r\n    if (query.length > 2) { // Only start searching after 3 characters\r\n      setLoading(true);\r\n      \r\n      // Check if we have cached results\r\n      if (searchCacheRef.current[query]) {\r\n        setSuggestions(searchCacheRef.current[query]);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      \r\n      // Validate that the API is loaded\r\n      if (!window.google || !window.google.maps) {\r\n        setLoading(false);\r\n        setMapError(\"Google Maps API not available\");\r\n        return;\r\n      }\r\n      \r\n      // Use Google Places service for autocomplete\r\n      searchTimeoutRef.current = setTimeout(() => {\r\n        try {\r\n          // If Places service is available\r\n          if (autoCompleteServiceRef.current) {\r\n            autoCompleteServiceRef.current.getPlacePredictions(\r\n              { input: query }, \r\n              (predictions, status) => {\r\n                if (status === window.google.maps.places.PlacesServiceStatus.OK && predictions) {\r\n                  // Convert predictions to the format our component expects\r\n                  const results = predictions.slice(0, 5).map(prediction => ({\r\n                    place_id: prediction.place_id,\r\n                    display_name: prediction.description,\r\n                    type: getPlaceType(prediction.types || [])\r\n                  }));\r\n                  \r\n                  // Save to cache\r\n                  searchCacheRef.current[query] = results;\r\n                  setSuggestions(results);\r\n                } else {\r\n                  setSuggestions([]);\r\n                }\r\n                setLoading(false);\r\n              }\r\n            );\r\n          } else if (geocoderRef.current) {\r\n            // Fallback to simple geocoding if Places isn't available\r\n            geocoderRef.current.geocode({ address: query }, (results, status) => {\r\n              if (status === 'OK') {\r\n                const formattedResults = results.slice(0, 5).map(result => ({\r\n                  place_id: result.place_id,\r\n                  display_name: result.formatted_address,\r\n                  position: result.geometry.location,\r\n                  type: getPlaceType(result.types || [])\r\n                }));\r\n                \r\n                // Save to cache\r\n                searchCacheRef.current[query] = formattedResults;\r\n                setSuggestions(formattedResults);\r\n              } else {\r\n                setSuggestions([]);\r\n              }\r\n              setLoading(false);\r\n            });\r\n          } else {\r\n            setSuggestions([]);\r\n            setLoading(false);\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error in search:\", error);\r\n          setSuggestions([]);\r\n          setLoading(false);\r\n        }\r\n      }, 300);\r\n    } else {\r\n      setSuggestions([]);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Determine place type based on Google types\r\n  const getPlaceType = (types) => {\r\n    if (!types || types.length === 0) return 'Place';\r\n    \r\n    if (types.includes('locality') || types.includes('administrative_area_level_1')) {\r\n      return 'City';\r\n    } else if (types.includes('establishment')) {\r\n      return 'Establishment';\r\n    } else if (types.includes('street_address') || types.includes('route')) {\r\n      return 'Address';\r\n    }\r\n    return 'Place';\r\n  };\r\n\r\n  // Handle suggestion selection\r\n  const handleSuggestionClick = (suggestion) => {\r\n    if (!googleMapRef.current) {\r\n      console.error(\"Map not initialized\");\r\n      return;\r\n    }\r\n    \r\n    setLoading(true);\r\n    \r\n    try {\r\n      // If we have a place_id, use Places service to get details\r\n      if (suggestion.place_id && placesServiceRef.current) {\r\n        placesServiceRef.current.getDetails(\r\n          { \r\n            placeId: suggestion.place_id, \r\n            fields: ['name', 'formatted_address', 'geometry'] \r\n          }, \r\n          (place, status) => {\r\n            if (status === window.google.maps.places.PlacesServiceStatus.OK) {\r\n              // Create a location with place details\r\n              const newLocation = {\r\n                id: Date.now(),\r\n                position: place.geometry.location,\r\n                name: place.name || suggestion.display_name.split(',')[0],\r\n                fullName: place.formatted_address || suggestion.display_name\r\n              };\r\n              \r\n              // Add location to the list\r\n              setSelectedLocations(prev => [...prev, newLocation]);\r\n              \r\n              // Center map on location\r\n              googleMapRef.current.setCenter(place.geometry.location);\r\n              googleMapRef.current.setZoom(15);\r\n              \r\n              // Create a marker for the location\r\n              const marker = createMarker(newLocation);\r\n              if (marker) markersRef.current.push(marker);\r\n              \r\n              // Update search field\r\n              setSearchText(place.formatted_address || suggestion.display_name);\r\n            }\r\n            \r\n            setLoading(false);\r\n            setSuggestions([]);\r\n          }\r\n        );\r\n      } else if (suggestion.position) {\r\n        // If we already have the position (from geocoding fallback)\r\n        const newLocation = {\r\n          id: Date.now(),\r\n          position: suggestion.position,\r\n          name: suggestion.display_name.split(',')[0],\r\n          fullName: suggestion.display_name\r\n        };\r\n        \r\n        setSelectedLocations(prev => [...prev, newLocation]);\r\n        googleMapRef.current.setCenter(suggestion.position);\r\n        googleMapRef.current.setZoom(15);\r\n        \r\n        const marker = createMarker(newLocation);\r\n        if (marker) markersRef.current.push(marker);\r\n        \r\n        setSearchText(suggestion.display_name);\r\n        setLoading(false);\r\n        setSuggestions([]);\r\n      } else {\r\n        setLoading(false);\r\n        setSuggestions([]);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error selecting suggestion:\", error);\r\n      setLoading(false);\r\n      setSuggestions([]);\r\n    }\r\n  };\r\n\r\n  // Function to remove a location\r\n  const removeLocation = (locationId) => {\r\n    // Remove the marker from the map\r\n    const markerIndex = markersRef.current.findIndex(marker => marker.id === locationId);\r\n    if (markerIndex !== -1) {\r\n      markersRef.current[markerIndex].marker.setMap(null);\r\n      markersRef.current.splice(markerIndex, 1);\r\n    }\r\n    \r\n    // Remove the location from the list\r\n    setSelectedLocations(prev => prev.filter(loc => loc.id !== locationId));\r\n  };\r\n\r\n  // Function to clear search field\r\n  const clearSearch = () => {\r\n    setSearchText('');\r\n    setSuggestions([]);\r\n  };\r\n\r\n  return (\r\n    <div style={{ position: 'relative', width: '100%', height: '100%' }}>\r\n      {/* Error message if it exists */}\r\n      {mapError && (\r\n        <div style={{\r\n          position: 'absolute',\r\n          top: '50%',\r\n          left: '50%',\r\n          transform: 'translate(-50%, -50%)',\r\n          backgroundColor: 'rgba(255, 0, 0, 0.8)',\r\n          color: 'white',\r\n          padding: '20px',\r\n          borderRadius: '5px',\r\n          zIndex: 2000,\r\n          maxWidth: '80%',\r\n          textAlign: 'center'\r\n        }}>\r\n          <h3>Error loading the map</h3>\r\n          <p>{mapError}</p>\r\n          <p>Suggestions: Verify your API key or reload the page</p>\r\n        </div>\r\n      )}\r\n      \r\n      {/* User help message */}\r\n      <div style={{ \r\n        position: 'absolute',\r\n        bottom: '20px',\r\n        left: '50%',\r\n        transform: 'translateX(-50%)',\r\n        backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n        color: 'white',\r\n        padding: '8px 16px',\r\n        borderRadius: '20px',\r\n        fontSize: '14px',\r\n        zIndex: 1000,\r\n        pointerEvents: 'none'\r\n      }}>\r\n        Double-click anywhere on the map to select a location\r\n      </div>\r\n      \r\n      {/* Search bar */}\r\n      <div style={{ \r\n        position: 'absolute', \r\n        top: '10px', \r\n        left: '10px', \r\n        right: '10px', \r\n        zIndex: 1000 \r\n      }}>\r\n        <div style={{ position: 'relative' }}>\r\n          <input\r\n            type=\"text\"\r\n            value={searchText}\r\n            onChange={handleSearchChange}\r\n            placeholder=\"Search location (city, address, place)\"\r\n            style={{ \r\n              width: '100%', \r\n              padding: '10px', \r\n              borderRadius: '4px',\r\n              border: '1px solid #ccc',\r\n              boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\r\n            }}\r\n          />\r\n          \r\n          {searchText && (\r\n            <button \r\n              onClick={clearSearch}\r\n              style={{\r\n                position: 'absolute',\r\n                right: '10px',\r\n                top: '50%',\r\n                transform: 'translateY(-50%)',\r\n                background: 'none',\r\n                border: 'none',\r\n                cursor: 'pointer',\r\n                fontSize: '16px'\r\n              }}\r\n            >\r\n              ✕\r\n            </button>\r\n          )}\r\n        </div>\r\n        \r\n        {loading && (\r\n          <div style={{ \r\n            background: 'white', \r\n            padding: '10px', \r\n            borderRadius: '0 0 4px 4px',\r\n            border: '1px solid #ccc',\r\n            borderTop: 'none',\r\n            textAlign: 'center'\r\n          }}>\r\n            Loading suggestions...\r\n          </div>\r\n        )}\r\n        \r\n        {suggestions.length > 0 && (\r\n          <ul style={{ \r\n            listStyle: 'none',\r\n            margin: '0',\r\n            padding: '0',\r\n            background: 'white',\r\n            border: '1px solid #ccc',\r\n            borderTop: 'none',\r\n            borderRadius: '0 0 4px 4px',\r\n            maxHeight: '200px',\r\n            overflowY: 'auto'\r\n          }}>\r\n            {suggestions.map((suggestion, index) => (\r\n              <li \r\n                key={index} \r\n                onClick={() => handleSuggestionClick(suggestion)}\r\n                style={{ \r\n                  padding: '10px',\r\n                  borderBottom: index < suggestions.length - 1 ? '1px solid #eee' : 'none',\r\n                  cursor: 'pointer'\r\n                }}\r\n                onMouseOver={(e) => e.target.style.backgroundColor = '#f5f5f5'}\r\n                onMouseOut={(e) => e.target.style.backgroundColor = 'transparent'}\r\n              >\r\n                <div style={{ fontWeight: 'bold' }}>\r\n                  {suggestion.display_name.split(',')[0]}\r\n                </div>\r\n                <div style={{ fontSize: '12px', color: '#666' }}>\r\n                  {suggestion.display_name.split(',').slice(1).join(',')}\r\n                </div>\r\n                <div style={{ fontSize: '11px', color: '#999', fontStyle: 'italic' }}>\r\n                  {suggestion.type}\r\n                </div>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n      </div>\r\n      \r\n      {/* Google Maps container */}\r\n      <div\r\n        ref={mapRef}\r\n        style={{\r\n          width: '100%',\r\n          height: '100%',\r\n          backgroundColor: '#f0f0f0'\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}